
// Verilog netlist produced by program ldbanno, Version Diamond (64-bit) 3.12.1.454

// ldbanno -n Verilog -o study_001_impl1_mapvo.vo -w -neg -gui -msgset C:/Users/eidos/Desktop/common/db/work/promote.xml study_001_impl1_map.ncd 
// Netlist created on Thu Nov 03 19:05:26 2022
// Netlist written on Thu Nov 03 19:05:29 2022
// Design is for device LCMXO2-2000ZE
// Design is for package TQFP100
// Design is for performance grade 1

`timescale 1 ns / 1 ps

module ci_stim_fpga_wrapper ( i_rst_n, sw1_a, sw1_b, sw1_pb, sw2_a, sw2_b, 
                              sw2_pb, polarity, led_out, lv_dir, lv_oe_n, 
                              clk_out, data_out, stim_comp_err, stim_comp_en_n, 
                              stim_an, stim_ca, stim_dac0_val, stim_dac1_val, 
                              stim_bcg0_sel, stim_bcg1_sel );
  input  i_rst_n, sw1_a, sw1_b, sw1_pb, sw2_a, sw2_b, sw2_pb;
  input  [2:0] polarity;
  input  [7:0] stim_comp_err;
  output [15:0] led_out;
  output lv_dir, lv_oe_n, clk_out, data_out, stim_comp_en_n;
  output [7:0] stim_an;
  output [7:0] stim_ca;
  output [7:0] stim_dac0_val;
  output [7:0] stim_dac1_val;
  output [2:0] stim_bcg0_sel;
  output [2:0] stim_bcg1_sel;
  wire   sw2_counter_lcry_0_RNO_1, sw2_counter_lcry_0_RNO_0, N_9_i, 
         c_channel_1_0_sqmuxa_1_i, \r_channel_1[6] , \r_channel_1[7] , 
         sw2_counter, \u_cg_fsm/r_rate_cnt[6] , \u_cg_fsm/r_sync_rate[6] , 
         \u_cg_fsm/r_rate_cnt[7] , \u_cg_fsm/r_sync_rate[7] , 
         \u_cg_fsm/w_rate_tmout_0_data_tmp[2] , 
         \u_cg_fsm/w_rate_tmout_0_data_tmp_i[3] , \u_cg_fsm/r_rate_cnt[4] , 
         \u_cg_fsm/r_sync_rate[4] , \u_cg_fsm/r_rate_cnt[5] , 
         \u_cg_fsm/r_sync_rate[5] , \u_cg_fsm/r_rate_cnt[2] , 
         \u_cg_fsm/r_sync_rate[2] , \u_cg_fsm/r_rate_cnt[3] , 
         \u_cg_fsm/r_sync_rate[3] , \u_cg_fsm/w_rate_tmout_0_data_tmp[0] , 
         \u_cg_fsm/r_rate_cnt[0] , \u_cg_fsm/r_sync_rate[0] , 
         \u_cg_fsm/r_rate_cnt[1] , \u_cg_fsm/r_sync_rate[1] , 
         \u_cg_fsm/r_duration_cnt[6] , \u_cg_fsm/r_duration_cnt15_6 , 
         \u_cg_fsm/r_duration_cnt[7] , \u_cg_fsm/r_duration_cnt15_7 , 
         \u_cg_fsm/w_duration_tmout_0_data_tmp[2] , 
         \u_cg_fsm/r_disabled_dac_sel_found_d , 
         \u_cg_fsm/w_duration_tmout_0_data_tmp_i[3] , 
         \u_cg_fsm/r_interval_value[0] , \u_cg_fsm/r_duration_cnt[4] , 
         \u_cg_fsm/r_duration_cnt15_4 , \u_cg_fsm/r_duration_cnt[5] , 
         \u_cg_fsm/r_duration_cnt15_5 , \u_cg_fsm/r_duration_cnt[2] , 
         \u_cg_fsm/r_duration_cnt15_2 , \u_cg_fsm/r_duration_cnt[3] , 
         \u_cg_fsm/r_duration_cnt15_3 , 
         \u_cg_fsm/w_duration_tmout_0_data_tmp[0] , \u_cg_fsm/r_state[1] , 
         \u_cg_fsm/r_state[2] , \u_cg_fsm/r_duration_cnt[0] , 
         \u_cg_fsm/r_duration_cnt15_0 , \u_cg_fsm/r_duration_cnt[1] , 
         \u_cg_fsm/r_duration_cnt15_1 , \r_mode[1] , \r_mode[2] , 
         \u_cg_fsm/r_interval_cnt[7] , \u_cg_fsm/r_interval_cnt[6] , 
         \u_cg_fsm/w_interval_tmout_0_data_tmp[2] , 
         \u_cg_fsm/r_sync_cathod_phase[2] , 
         \u_cg_fsm/w_interval_tmout_0_data_tmp_i[3] , 
         \u_cg_fsm/r_interval_cnt[5] , \u_cg_fsm/r_interval_cnt[4] , 
         \u_cg_fsm/r_interval_cnt[3] , \u_cg_fsm/r_interval_cnt[2] , 
         \u_cg_fsm/w_interval_tmout_0_data_tmp[0] , 
         \u_cg_fsm/r_interval_cnt[0] , \u_cg_fsm/r_interval_cnt[1] , 
         \u_cg_fsm/r_state[3] , \u_cg_fsm/r_sync_cathod_phase[1] , 
         c_rate_1_sqmuxa_i, \u_cg_fsm/r_duration_cnt15_cry_6 , \r_rate[2] , 
         \u_cg_fsm/r_duration_cnt15 , \r_rate[3] , 
         \u_cg_fsm/r_duration_cnt15_cry_4 , \r_rate[0] , \r_rate[1] , 
         c_duration_0_sqmuxa_1_i, \u_cg_fsm/r_duration_cnt15_cry_2 , 
         \r_duration[6] , \r_duration[7] , \u_cg_fsm/r_duration_cnt15_cry_0 , 
         \r_duration[4] , \r_duration[5] , \r_duration[2] , \r_duration[3] , 
         \u_cg_fsm/r_duration_cnt , \u_cg_fsm/r_duration_cnt_s[7] , 
         \u_cg_fsm/r_duration_cnte , w_div4_clk, 
         \u_cg_fsm/r_duration_cnt_cry[6] , \u_cg_fsm/r_duration_cnt_s[6] , 
         \u_cg_fsm/r_duration_cnt_s[5] , \u_cg_fsm/r_duration_cnt_cry[4] , 
         \u_cg_fsm/r_duration_cnt_s[4] , \u_cg_fsm/r_duration_cnt_s[3] , 
         \u_cg_fsm/r_duration_cnt_cry[2] , \u_cg_fsm/r_duration_cnt_s[2] , 
         \u_cg_fsm/r_duration_cnt_s[1] , \u_cg_fsm/r_duration_cnt_cry[0] , 
         \u_cg_fsm/r_duration_cnt_s[0] , \u_cg_fsm/r_rate_cnt , 
         \u_cg_fsm/r_rate_cnt_s[7] , \u_cg_fsm/r_rate_cnte , 
         \u_cg_fsm/r_rate_cnt_cry[6] , \u_cg_fsm/r_rate_cnt_s[6] , 
         \u_cg_fsm/r_rate_cnt_s[5] , \u_cg_fsm/r_rate_cnt_cry[4] , 
         \u_cg_fsm/r_rate_cnt_s[4] , \u_cg_fsm/r_rate_cnt_s[3] , 
         \u_cg_fsm/r_rate_cnt_cry[2] , \u_cg_fsm/r_rate_cnt_s[2] , 
         \u_cg_fsm/r_rate_cnt_s[1] , \u_cg_fsm/r_rate_cnt_cry[0] , 
         \u_cg_fsm/r_rate_cnt_s[0] , \sw1_max_count_num_1[6] , 
         \sw1_counter[7] , c_channel_0_0_sqmuxa_1_i, sw1_counter33_cry_6, 
         \r_channel_0[6] , sw1_counter33, \r_channel_0[7] , \sw1_counter[6] , 
         \sw1_max_count_num_1[3] , \sw1_counter[5] , sw1_counter33_cry_4, 
         \r_channel_0[4] , \r_channel_0[5] , \sw1_max_count_num_1[1] , 
         \sw1_counter[4] , \sw1_counter[3] , sw1_counter33_cry_2, 
         \r_channel_0[2] , \r_channel_0[3] , \sw1_counter[2] , 
         \sw1_counter[1] , sw1_counter33_cry_0, \r_channel_0[0] , 
         \r_channel_0[1] , sw2_counter30_c3, un1_r_mode_3, \sw1_counter[0] , 
         r_req_mode_transition, sw1_b_c, sw1_az, r_ack_mode_transition, 
         un1_r_ack_mode_transition, sw1_counter_1_sqmuxa, \sw1_counter_s[7] , 
         \sw1_counter_s[6] , \sw1_counter_cry[5] , \sw1_counter_s[5] , 
         \sw1_counter_s[4] , \sw1_counter_cry[3] , \sw1_counter_s[3] , 
         \sw1_counter_s[2] , \sw1_counter_cry[1] , \sw1_counter_s[1] , 
         \sw1_counter_s[0] , sw1_counter, sw1_counter_0_sqmuxa, sw1_counter_0, 
         N_4_i, \r_channel_1[0] , \r_channel_1[1] , \sw2_counter[7] , sw2_b_c, 
         sw2_counter30, \sw2_counter[6] , \sw2_counter_s[7] , 
         \sw2_counter_s[6] , sw2_az, \sw2_counter_cry[5] , \sw2_counter[5] , 
         \sw2_counter[4] , \sw2_counter_s[5] , \sw2_counter_s[4] , 
         \sw2_counter_cry[3] , \sw2_counter[2] , \sw2_counter_s[3] , 
         \sw2_counter_s[2] , \sw2_counter_cry[1] , \sw2_counter[1] , 
         \sw2_counter[0] , \sw2_counter_s[1] , \sw2_counter_s[0] , CO0, 
         \display_item_num_3[0] , sw2_counter26_i, 
         \u_cg_fsm/u_sync_anode_phase_en/sw1_counter29lto7_5 , 
         \display_item_num[1] , \display_item_num[2] , \display_item_num_3[2] , 
         \display_item_num_3[1] , \u_cg_fsm/r_rate_phase11_3 , 
         \u_cg_fsm/r_rate_phase11_4 , \u_cg_fsm/r_rate_phase11_i , 
         \u_cg_fsm/un1_r_sync_search_disabled_channel_phase_end_p_d_g , 
         \u_cg_fsm/r_rate_phase , \u_cg_fsm/r_rate[3] , \u_cg_fsm/r_rate[2] , 
         \u_cg_fsm/w_sync_trigger , 
         \u_cg_fsm.c_stim_an[6]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm/r_rate[5] , \u_cg_fsm/r_rate[4] , 
         \u_cg_fsm.c_stim_an[4]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm.c_stim_an[5]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm/r_rate[7] , \u_cg_fsm/r_rate[6] , 
         \u_cg_fsm.c_stim_an[2]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm.c_stim_an[3]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm/u_sync_search_disabled_channel_phase_end_p/w_slave_ack , 
         \u_cg_fsm/u_sync_search_disabled_channel_phase_end_p/r_master_en , 
         \u_cg_fsm/u_sync_search_disabled_channel_phase_end_p/r_slave_en[1] , 
         \u_cg_fsm/w_sync_search_disabled_channel_phase_end_p , 
         \u_cg_fsm/r_sync_search_disabled_channel_phase_end_p_d , 
         \u_cg_fsm/u_sync_search_disabled_channel_phase_end_p/r_slave_en8 , 
         \u_cg_fsm/u_sync_trigger/w_slave_ack , 
         \u_cg_fsm/u_sync_trigger/r_master_en , 
         \u_cg_fsm/u_sync_trigger/r_slave_en_0[1] , 
         \u_cg_fsm/r_sync_trigger_d , \u_cg_fsm/u_sync_trigger/r_slave_en8 , 
         \u_cg_fsm/u_sync_anode_phase_en/un1_i_men_1_0 , 
         \u_cg_fsm.c_stim_an[0]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm/u_sync_anode_phase_en/r_master_en , 
         \u_cg_fsm.c_stim_an[1]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm/u_sync_anode_phase_en/r_slave_en[0] , 
         \u_cg_fsm/u_sync_anode_phase_en/r_slave_en8 , 
         \u_cg_fsm.r_channel_0[1]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm.r_channel_0[2]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm/r_slave_en_1[1] , 
         \u_cg_fsm/u_sync_cathod_phase_en/un1_i_men_1 , 
         \u_cg_fsm.r_stim_bcg1_sel_2[2]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm/u_sync_cathod_phase_en/r_master_en , 
         \u_cg_fsm.r_channel_0[0]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm/u_sync_cathod_phase_en/r_slave_en[0] , 
         \u_cg_fsm/u_sync_cathod_phase_en/r_slave_en8 , 
         \u_cg_fsm.r_stim_bcg1_sel_2[0]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm.r_stim_bcg1_sel_2[1]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm/r_slave_en_0[1] , \u_cg_fsm/w_slave_ack_2 , 
         \u_cg_fsm/u_sync_fsm_trigger/w_fsm_trigger , 
         \u_cg_fsm/u_sync_fsm_trigger/r_master_en_RNO_0_0 , 
         \u_cg_fsm/u_sync_fsm_trigger/r_master_en , 
         \u_cg_fsm/u_sync_search_disabled_channel_phase_end_p/r_master_en_RNO_0 , 
         \u_cg_fsm.c_stim_ca[6]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm.c_stim_ca[7]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm/u_sync_search_disabled_channel_phase_end_p/r_slave_en[0] , 
         \u_cg_fsm.c_stim_ca[4]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm.c_stim_ca[5]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm.c_stim_ca[2]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm.c_stim_ca[3]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm/u_sync_trigger/r_master_en_RNO , 
         \u_cg_fsm.c_stim_ca[0]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm.c_stim_ca[1]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm/u_sync_trigger/r_slave_en[0] , 
         \u_cg_fsm.r_dac_amp_0[7]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm.c_stim_comp_en_n\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm.r_dac_amp_0[5]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm.r_dac_amp_0[6]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm.r_dac_amp_0[3]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm/w_debug_fsm_led[2] , 
         \u_cg_fsm.r_dac_amp_0[4]\000/BUF0\000/BUF0\000/BUF0 , \led_out_c[15] , 
         \u_cg_fsm/r_anode_phase_RNO , 
         \u_cg_fsm.r_dac_amp_0[1]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm/w_debug_fsm_led[3] , 
         \u_cg_fsm.r_dac_amp_0[2]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm/un1_c_next_state_0_sqmuxa_1_i , 
         \u_cg_fsm.r_stim_dac1_val_2[7]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm/w_debug_fsm_led[4] , 
         \u_cg_fsm.r_dac_amp_0[0]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm/r_cathod_phase_RNO , 
         \u_cg_fsm.r_stim_dac1_val_2[5]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm/w_debug_fsm_led[5] , 
         \u_cg_fsm.r_stim_dac1_val_2[6]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm.r_stim_dac1_val_2[3]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm/w_slave_ack_0 , 
         \u_cg_fsm.r_stim_dac1_val_2[4]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm.r_stim_dac1_val_2[1]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm/w_slave_ack_1 , 
         \u_cg_fsm.r_stim_dac1_val_2[2]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm/u_sync_fsm_trigger/r_slave_en8 , 
         \u_cg_fsm.c_stim_an[7]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm.r_stim_dac1_val_2[0]\000/BUF0\000/BUF0\000/BUF0 , 
         \u_cg_fsm/r_slave_en_2[1] , \u_trigger_en/r_slave_en8 , VCC, 
         \u_trigger_en.r_slave_en[1] , GND, \u_trigger_en.w_slave_ack , 
         \u_trigger_en/r_master_en , \u_cg_fsm/r_channel_0_0[5] , 
         \u_cg_fsm/r_channel_0_0[4] , \u_cg_fsm/r_channel_1_0[7] , 
         \u_cg_fsm/r_channel_1_0[6] , \u_cg_fsm/r_channel_1_0[5] , 
         \u_cg_fsm/r_channel_1_0[4] , \u_trigger_en/un1_i_men_1_1 , 
         \u_cg_fsm/N_252 , \u_cg_fsm/c_stim_ca_0_0_o2_1[0] , 
         \u_cg_fsm/led_out_1_sn_N_8 , \u_cg_fsm/led_out_1_sn_N_7 , 
         \u_cg_fsm/u_sync_anode_phase_en/N_81 , 
         \u_cg_fsm/u_sync_anode_phase_en/N_72 , \led_out_c[3] , 
         \r_duration[1] , \u_cg_fsm/N_70 , \u_cg_fsm/w_debug_fsm_led[7] , 
         \r_dac_amp_0[7] , sw2_counter26, \r_dac_amp_1[7] , 
         \u_cg_fsm/led_out_1_sn_N_6 , \u_cg_fsm/u_sync_anode_phase_en/N_85 , 
         pb_p_test, \u_cg_fsm/u_sync_anode_phase_en/N_78 , 
         \u_cg_fsm/u_sync_anode_phase_en/N_69 , \led_out_c[0] , 
         \r_dac_amp_0[5] , \r_dac_amp_1[5] , 
         \u_cg_fsm/u_sync_anode_phase_en/N_83 , \r_dac_amp_0[4] , 
         \r_dac_amp_1[4] , \u_cg_fsm/u_sync_anode_phase_en/N_82 , 
         \r_dac_amp_0[3] , \r_dac_amp_1[3] , \r_dac_amp_0[0] , 
         \r_dac_amp_1[0] , \polarity_c[2] , sw2_counter26_ac0_1, w_sw1_pb_p, 
         \un1_c_dac_amp_0_0_sqmuxa[0] , \r_rate[7] , 
         \u_cg_fsm/u_sync_anode_phase_en/N_76 , \r_channel_1[5] , \r_rate[5] , 
         \u_cg_fsm/u_sync_anode_phase_en/N_74 , \r_channel_1[4] , \r_rate[4] , 
         \u_cg_fsm/u_sync_anode_phase_en/N_73 , \r_channel_1[3] , 
         \r_duration[0] , \u_cg_fsm/N_80 , \u_cg_fsm/N_71 , \led_out_c[2] , 
         \u_cg_fsm/N_79 , \led_out_c[1] , \r_dac_amp_0[6] , \r_dac_amp_1[6] , 
         \u_cg_fsm/N_84 , \r_dac_amp_0[2] , \r_dac_amp_1[2] , \r_dac_amp_0[1] , 
         \r_dac_amp_1[1] , \r_rate[6] , \u_cg_fsm/N_75 , \r_channel_1[2] , 
         \u_cg_fsm/un1_w_disabled_dac_sel_found_4 , 
         \u_cg_fsm/un1_w_disabled_dac_sel_found_3 , 
         \u_cg_fsm/un1_w_disabled_dac_sel_found_2 , 
         \u_cg_fsm/r_search_disabled_channel_phase , 
         \u_cg_fsm/r_master_en_2_1 , un1_w_async_ack_mode_transition_p, 
         \u_cg_fsm/r_search_disabled_channel_phase_RNI843J1 , 
         \r_db_sw1_pb_d[0] , \r_db_sw1_pb_d[1] , 
         \u_cg_fsm/u_sync_anode_phase_en/sw1_max_count_num15 , 
         \u_cg_fsm/r_interval_cnte , 
         \u_cg_fsm/u_sync_anode_phase_en/c_channel_1_0_sqmuxa_2 , 
         \u_cg_fsm/un1_i_polarity_1 , \u_cg_fsm/r_channel_1[0] , 
         \u_cg_fsm/r_channel_1[1] , \u_cg_fsm/CO1 , \led_out_c[7] , 
         \u_cg_fsm/r_duration[4] , \u_cg_fsm/r_duration[5] , \led_out_c[5] , 
         \u_cg_fsm/r_duration[2] , \u_cg_fsm/r_duration[3] , 
         \u_cg_fsm/u_sync_anode_phase_en/un1_sw1_max_count_num14_1 , 
         \sw1_max_count_num_3[6] , \u_cg_fsm/r_rate[0] , \u_cg_fsm/r_rate[1] , 
         \u_cg_fsm/u_sync_anode_phase_en/c_dac_amp_1_0_sqmuxa_1 , 
         \un1_c_dac_amp_1_0_sqmuxa_1_i[0] , un1_r_mode_NE, 
         \r_async_ack_mode_transition[2] , \r_async_ack_mode_transition[1] , 
         \u_cg_fsm/u_sync_anode_phase_en/un1_r_mode_NE_1 , \r_mode[0] , 
         \u_cg_fsm/u_sync_anode_phase_en/sw1_counter29lto7_4 , 
         \u_cg_fsm/w_sync_cathod_phase_en , 
         \u_cg_fsm/r_search_disabled_channel[0] , 
         \u_cg_fsm/r_search_disabled_channel[1] , 
         \u_cg_fsm.w_search_disabled_channel_phase_end_p , 
         \u_cg_fsm/r_search_disabled_channel[4] , 
         \u_cg_fsm/r_search_disabled_channel[5] , \u_cg_fsm/r_channel_1_0[3] , 
         \u_cg_fsm/r_channel_1[2] , \u_cg_fsm/N_187 , \u_cg_fsm/N_192 , 
         \u_cg_fsm.r_channel_0[2] , \u_cg_fsm.r_channel_0[1] , 
         \u_cg_fsm.r_channel_0[0] , \u_cg_fsm/c_stim_ca_0_0_o2[0] , 
         \u_cg_fsm/un1_w_disabled_dac_sel_found_0 , 
         \u_cg_fsm/r_search_disabled_channel[6] , \u_cg_fsm/N_105 , 
         \u_cg_fsm/N_96 , \u_cg_fsm/r_duration[7] , \u_cg_fsm/r_duration[6] , 
         \u_cg_fsm/un1_w_disabled_dac_sel_found_1 , 
         \u_cg_fsm/r_search_disabled_channel[3] , 
         \u_cg_fsm/c_map_cathod_channel_023 , \u_cg_fsm/N_101 , 
         \u_cg_fsm/un2_w_disabled_dac_sel_found[1] , \u_cg_fsm/N_193 , 
         \u_cg_fsm/r_duration[1] , \u_cg_fsm/r_duration[0] , 
         \u_cg_fsm/c_map_cathod_channel_125 , 
         \u_cg_fsm/c_map_cathod_channel_025 , 
         \u_cg_fsm/r_search_disabled_channel[2] , 
         \u_cg_fsm/c_map_cathod_channel[5] , 
         \u_cg_fsm/c_map_cathod_channel[2] , \u_cg_fsm/N_86_0 , 
         \u_cg_fsm/un2_w_disabled_dac_sel_found[4] , 
         \u_cg_fsm/r_search_disabled_channel[7] , 
         \u_cg_fsm/c_map_cathod_channel_027 , \u_cg_fsm/N_207 , 
         \u_cg_fsm/N_102 , \u_cg_fsm/N_99 , \u_cg_fsm/N_100 , \u_cg_fsm/N_97 , 
         \u_cg_fsm/r_rate_phase11 , \u_cg_fsm/r_channel_0_0[7] , 
         \u_cg_fsm/r_channel_0_0[6] , \u_cg_fsm/r_channel_0_0[3] , 
         \u_cg_fsm/c_map_cathod_channel_122_1 , 
         \u_cg_fsm/c_map_cathod_channel_122 , 
         \u_cg_fsm/c_map_cathod_channel_022 , \u_cg_fsm/c_next_state_0_sqmuxa , 
         \u_cg_fsm/r_duration_cnt19 , \u_cg_fsm/c_map_cathod_channel_125_1 , 
         w_trigger_en, \led_out_c[4] , \led_out_c[6] , 
         \u_cg_fsm/r_search_disabled_channel_phase_RNO , 
         \u_cg_fsm.c_cathod_phase_en_0_sqmuxa , i_rst_n_c, 
         \stim_bcg1_sel_c[2] , \stim_bcg1_sel_c[1] , \stim_bcg1_sel_c[0] , 
         \stim_bcg0_sel_c[2] , \stim_bcg0_sel_c[1] , \stim_bcg0_sel_c[0] , 
         \stim_dac1_val_c[7] , \stim_dac1_val_c[6] , \stim_dac1_val_c[5] , 
         \stim_dac1_val_c[4] , \stim_dac1_val_c[3] , \stim_dac1_val_c[2] , 
         \stim_dac1_val_c[1] , \stim_dac1_val_c[0] , \stim_dac0_val_c[7] , 
         \stim_dac0_val_c[6] , \stim_dac0_val_c[5] , \stim_dac0_val_c[4] , 
         \stim_dac0_val_c[3] , \stim_dac0_val_c[2] , \stim_dac0_val_c[1] , 
         \stim_dac0_val_c[0] , \stim_ca_c[7] , \stim_ca_c[6] , \stim_ca_c[5] , 
         \stim_ca_c[4] , \stim_ca_c[3] , \stim_ca_c[2] , \stim_ca_c[1] , 
         \stim_ca_c[0] , \stim_an_c[7] , \stim_an_c[6] , \stim_an_c[5] , 
         \stim_an_c[4] , \stim_an_c[3] , \stim_an_c[2] , \stim_an_c[1] , 
         \stim_an_c[0] , stim_comp_en_n_c, VCCI;

  SLICE_0 SLICE_0( .B1(sw2_counter_lcry_0_RNO_1), 
    .A1(sw2_counter_lcry_0_RNO_0), .B0(N_9_i), .CE(c_channel_1_0_sqmuxa_1_i), 
    .Q0(\r_channel_1[6] ), .Q1(\r_channel_1[7] ), .FCO(sw2_counter));
  u_cg_fsm_SLICE_1 \u_cg_fsm/SLICE_1 ( .D0(\u_cg_fsm/r_rate_cnt[6] ), 
    .C0(\u_cg_fsm/r_sync_rate[6] ), .B0(\u_cg_fsm/r_rate_cnt[7] ), 
    .A0(\u_cg_fsm/r_sync_rate[7] ), 
    .FCI(\u_cg_fsm/w_rate_tmout_0_data_tmp[2] ), 
    .F1(\u_cg_fsm/w_rate_tmout_0_data_tmp_i[3] ));
  u_cg_fsm_SLICE_2 \u_cg_fsm/SLICE_2 ( .D1(\u_cg_fsm/r_rate_cnt[4] ), 
    .C1(\u_cg_fsm/r_sync_rate[4] ), .B1(\u_cg_fsm/r_rate_cnt[5] ), 
    .A1(\u_cg_fsm/r_sync_rate[5] ), .D0(\u_cg_fsm/r_rate_cnt[2] ), 
    .C0(\u_cg_fsm/r_sync_rate[2] ), .B0(\u_cg_fsm/r_rate_cnt[3] ), 
    .A0(\u_cg_fsm/r_sync_rate[3] ), 
    .FCI(\u_cg_fsm/w_rate_tmout_0_data_tmp[0] ), 
    .FCO(\u_cg_fsm/w_rate_tmout_0_data_tmp[2] ));
  u_cg_fsm_SLICE_3 \u_cg_fsm/SLICE_3 ( .D1(\u_cg_fsm/r_rate_cnt[0] ), 
    .C1(\u_cg_fsm/r_sync_rate[0] ), .B1(\u_cg_fsm/r_rate_cnt[1] ), 
    .A1(\u_cg_fsm/r_sync_rate[1] ), 
    .FCO(\u_cg_fsm/w_rate_tmout_0_data_tmp[0] ));
  u_cg_fsm_SLICE_4 \u_cg_fsm/SLICE_4 ( .D0(\u_cg_fsm/r_duration_cnt[6] ), 
    .C0(\u_cg_fsm/r_duration_cnt15_6 ), .B0(\u_cg_fsm/r_duration_cnt[7] ), 
    .A0(\u_cg_fsm/r_duration_cnt15_7 ), 
    .FCI(\u_cg_fsm/w_duration_tmout_0_data_tmp[2] ), 
    .Q0(\u_cg_fsm/r_disabled_dac_sel_found_d ), 
    .F1(\u_cg_fsm/w_duration_tmout_0_data_tmp_i[3] ), 
    .Q1(\u_cg_fsm/r_interval_value[0] ));
  u_cg_fsm_SLICE_5 \u_cg_fsm/SLICE_5 ( .D1(\u_cg_fsm/r_duration_cnt[4] ), 
    .C1(\u_cg_fsm/r_duration_cnt15_4 ), .B1(\u_cg_fsm/r_duration_cnt[5] ), 
    .A1(\u_cg_fsm/r_duration_cnt15_5 ), .D0(\u_cg_fsm/r_duration_cnt[2] ), 
    .C0(\u_cg_fsm/r_duration_cnt15_2 ), .B0(\u_cg_fsm/r_duration_cnt[3] ), 
    .A0(\u_cg_fsm/r_duration_cnt15_3 ), 
    .FCI(\u_cg_fsm/w_duration_tmout_0_data_tmp[0] ), 
    .Q0(\u_cg_fsm/r_state[1] ), .Q1(\u_cg_fsm/r_state[2] ), 
    .FCO(\u_cg_fsm/w_duration_tmout_0_data_tmp[2] ));
  SLICE_6 SLICE_6( .D1(\u_cg_fsm/r_duration_cnt[0] ), 
    .C1(\u_cg_fsm/r_duration_cnt15_0 ), .B1(\u_cg_fsm/r_duration_cnt[1] ), 
    .A1(\u_cg_fsm/r_duration_cnt15_1 ), .Q0(\r_mode[1] ), .Q1(\r_mode[2] ), 
    .FCO(\u_cg_fsm/w_duration_tmout_0_data_tmp[0] ));
  u_cg_fsm_SLICE_7 \u_cg_fsm/SLICE_7 ( .B0(\u_cg_fsm/r_interval_cnt[7] ), 
    .A0(\u_cg_fsm/r_interval_cnt[6] ), 
    .FCI(\u_cg_fsm/w_interval_tmout_0_data_tmp[2] ), 
    .Q0(\u_cg_fsm/r_sync_cathod_phase[2] ), 
    .F1(\u_cg_fsm/w_interval_tmout_0_data_tmp_i[3] ));
  u_cg_fsm_SLICE_8 \u_cg_fsm/SLICE_8 ( .B1(\u_cg_fsm/r_interval_cnt[5] ), 
    .A1(\u_cg_fsm/r_interval_cnt[4] ), .B0(\u_cg_fsm/r_interval_cnt[3] ), 
    .A0(\u_cg_fsm/r_interval_cnt[2] ), 
    .FCI(\u_cg_fsm/w_interval_tmout_0_data_tmp[0] ), 
    .FCO(\u_cg_fsm/w_interval_tmout_0_data_tmp[2] ));
  u_cg_fsm_SLICE_9 \u_cg_fsm/SLICE_9 ( .C1(\u_cg_fsm/r_interval_cnt[0] ), 
    .B1(\u_cg_fsm/r_interval_value[0] ), .A1(\u_cg_fsm/r_interval_cnt[1] ), 
    .Q0(\u_cg_fsm/r_state[3] ), .Q1(\u_cg_fsm/r_sync_cathod_phase[1] ), 
    .FCO(\u_cg_fsm/w_interval_tmout_0_data_tmp[0] ));
  SLICE_10 SLICE_10( .B0(\u_cg_fsm/r_duration_cnt[7] ), 
    .A0(\u_cg_fsm/r_duration_cnt15_7 ), .CE(c_rate_1_sqmuxa_i), 
    .FCI(\u_cg_fsm/r_duration_cnt15_cry_6 ), .Q0(\r_rate[2] ), 
    .F1(\u_cg_fsm/r_duration_cnt15 ), .Q1(\r_rate[3] ));
  SLICE_11 SLICE_11( .B1(\u_cg_fsm/r_duration_cnt[6] ), 
    .A1(\u_cg_fsm/r_duration_cnt15_6 ), .B0(\u_cg_fsm/r_duration_cnt[5] ), 
    .A0(\u_cg_fsm/r_duration_cnt15_5 ), .CE(c_rate_1_sqmuxa_i), 
    .FCI(\u_cg_fsm/r_duration_cnt15_cry_4 ), .Q0(\r_rate[0] ), 
    .Q1(\r_rate[1] ), .FCO(\u_cg_fsm/r_duration_cnt15_cry_6 ));
  SLICE_12 SLICE_12( .B1(\u_cg_fsm/r_duration_cnt[4] ), 
    .A1(\u_cg_fsm/r_duration_cnt15_4 ), .B0(\u_cg_fsm/r_duration_cnt[3] ), 
    .A0(\u_cg_fsm/r_duration_cnt15_3 ), .CE(c_duration_0_sqmuxa_1_i), 
    .FCI(\u_cg_fsm/r_duration_cnt15_cry_2 ), .Q0(\r_duration[6] ), 
    .Q1(\r_duration[7] ), .FCO(\u_cg_fsm/r_duration_cnt15_cry_4 ));
  SLICE_13 SLICE_13( .B1(\u_cg_fsm/r_duration_cnt[2] ), 
    .A1(\u_cg_fsm/r_duration_cnt15_2 ), .B0(\u_cg_fsm/r_duration_cnt[1] ), 
    .A0(\u_cg_fsm/r_duration_cnt15_1 ), .CE(c_duration_0_sqmuxa_1_i), 
    .FCI(\u_cg_fsm/r_duration_cnt15_cry_0 ), .Q0(\r_duration[4] ), 
    .Q1(\r_duration[5] ), .FCO(\u_cg_fsm/r_duration_cnt15_cry_2 ));
  SLICE_14 SLICE_14( .B1(\u_cg_fsm/r_duration_cnt[0] ), 
    .A1(\u_cg_fsm/r_duration_cnt15_0 ), .CE(c_duration_0_sqmuxa_1_i), 
    .Q0(\r_duration[2] ), .Q1(\r_duration[3] ), 
    .FCO(\u_cg_fsm/r_duration_cnt15_cry_0 ));
  u_cg_fsm_SLICE_15 \u_cg_fsm/SLICE_15 ( .B0(\u_cg_fsm/r_duration_cnt[7] ), 
    .A0(\u_cg_fsm/r_duration_cnt ), .DI0(\u_cg_fsm/r_duration_cnt_s[7] ), 
    .CE(\u_cg_fsm/r_duration_cnte ), .CLK(w_div4_clk), 
    .FCI(\u_cg_fsm/r_duration_cnt_cry[6] ), 
    .F0(\u_cg_fsm/r_duration_cnt_s[7] ), .Q0(\u_cg_fsm/r_duration_cnt[7] ));
  u_cg_fsm_SLICE_16 \u_cg_fsm/SLICE_16 ( .B1(\u_cg_fsm/r_duration_cnt[6] ), 
    .A1(\u_cg_fsm/r_duration_cnt ), .B0(\u_cg_fsm/r_duration_cnt[5] ), 
    .A0(\u_cg_fsm/r_duration_cnt ), .DI1(\u_cg_fsm/r_duration_cnt_s[6] ), 
    .DI0(\u_cg_fsm/r_duration_cnt_s[5] ), .CE(\u_cg_fsm/r_duration_cnte ), 
    .CLK(w_div4_clk), .FCI(\u_cg_fsm/r_duration_cnt_cry[4] ), 
    .F0(\u_cg_fsm/r_duration_cnt_s[5] ), .Q0(\u_cg_fsm/r_duration_cnt[5] ), 
    .F1(\u_cg_fsm/r_duration_cnt_s[6] ), .Q1(\u_cg_fsm/r_duration_cnt[6] ), 
    .FCO(\u_cg_fsm/r_duration_cnt_cry[6] ));
  u_cg_fsm_SLICE_17 \u_cg_fsm/SLICE_17 ( .B1(\u_cg_fsm/r_duration_cnt[4] ), 
    .A1(\u_cg_fsm/r_duration_cnt ), .B0(\u_cg_fsm/r_duration_cnt[3] ), 
    .A0(\u_cg_fsm/r_duration_cnt ), .DI1(\u_cg_fsm/r_duration_cnt_s[4] ), 
    .DI0(\u_cg_fsm/r_duration_cnt_s[3] ), .CE(\u_cg_fsm/r_duration_cnte ), 
    .CLK(w_div4_clk), .FCI(\u_cg_fsm/r_duration_cnt_cry[2] ), 
    .F0(\u_cg_fsm/r_duration_cnt_s[3] ), .Q0(\u_cg_fsm/r_duration_cnt[3] ), 
    .F1(\u_cg_fsm/r_duration_cnt_s[4] ), .Q1(\u_cg_fsm/r_duration_cnt[4] ), 
    .FCO(\u_cg_fsm/r_duration_cnt_cry[4] ));
  u_cg_fsm_SLICE_18 \u_cg_fsm/SLICE_18 ( .B1(\u_cg_fsm/r_duration_cnt[2] ), 
    .A1(\u_cg_fsm/r_duration_cnt ), .B0(\u_cg_fsm/r_duration_cnt[1] ), 
    .A0(\u_cg_fsm/r_duration_cnt ), .DI1(\u_cg_fsm/r_duration_cnt_s[2] ), 
    .DI0(\u_cg_fsm/r_duration_cnt_s[1] ), .CE(\u_cg_fsm/r_duration_cnte ), 
    .CLK(w_div4_clk), .FCI(\u_cg_fsm/r_duration_cnt_cry[0] ), 
    .F0(\u_cg_fsm/r_duration_cnt_s[1] ), .Q0(\u_cg_fsm/r_duration_cnt[1] ), 
    .F1(\u_cg_fsm/r_duration_cnt_s[2] ), .Q1(\u_cg_fsm/r_duration_cnt[2] ), 
    .FCO(\u_cg_fsm/r_duration_cnt_cry[2] ));
  u_cg_fsm_SLICE_19 \u_cg_fsm/SLICE_19 ( .B1(\u_cg_fsm/r_duration_cnt[0] ), 
    .A1(\u_cg_fsm/r_duration_cnt ), .B0(\u_cg_fsm/r_duration_cnt ), 
    .DI1(\u_cg_fsm/r_duration_cnt_s[0] ), .CE(\u_cg_fsm/r_duration_cnte ), 
    .CLK(w_div4_clk), .F1(\u_cg_fsm/r_duration_cnt_s[0] ), 
    .Q1(\u_cg_fsm/r_duration_cnt[0] ), .FCO(\u_cg_fsm/r_duration_cnt_cry[0] ));
  u_cg_fsm_SLICE_20 \u_cg_fsm/SLICE_20 ( .B0(\u_cg_fsm/r_rate_cnt[7] ), 
    .A0(\u_cg_fsm/r_rate_cnt ), .DI0(\u_cg_fsm/r_rate_cnt_s[7] ), 
    .CE(\u_cg_fsm/r_rate_cnte ), .CLK(w_div4_clk), 
    .FCI(\u_cg_fsm/r_rate_cnt_cry[6] ), .F0(\u_cg_fsm/r_rate_cnt_s[7] ), 
    .Q0(\u_cg_fsm/r_rate_cnt[7] ));
  u_cg_fsm_SLICE_21 \u_cg_fsm/SLICE_21 ( .B1(\u_cg_fsm/r_rate_cnt[6] ), 
    .A1(\u_cg_fsm/r_rate_cnt ), .B0(\u_cg_fsm/r_rate_cnt[5] ), 
    .A0(\u_cg_fsm/r_rate_cnt ), .DI1(\u_cg_fsm/r_rate_cnt_s[6] ), 
    .DI0(\u_cg_fsm/r_rate_cnt_s[5] ), .CE(\u_cg_fsm/r_rate_cnte ), 
    .CLK(w_div4_clk), .FCI(\u_cg_fsm/r_rate_cnt_cry[4] ), 
    .F0(\u_cg_fsm/r_rate_cnt_s[5] ), .Q0(\u_cg_fsm/r_rate_cnt[5] ), 
    .F1(\u_cg_fsm/r_rate_cnt_s[6] ), .Q1(\u_cg_fsm/r_rate_cnt[6] ), 
    .FCO(\u_cg_fsm/r_rate_cnt_cry[6] ));
  u_cg_fsm_SLICE_22 \u_cg_fsm/SLICE_22 ( .B1(\u_cg_fsm/r_rate_cnt[4] ), 
    .A1(\u_cg_fsm/r_rate_cnt ), .B0(\u_cg_fsm/r_rate_cnt[3] ), 
    .A0(\u_cg_fsm/r_rate_cnt ), .DI1(\u_cg_fsm/r_rate_cnt_s[4] ), 
    .DI0(\u_cg_fsm/r_rate_cnt_s[3] ), .CE(\u_cg_fsm/r_rate_cnte ), 
    .CLK(w_div4_clk), .FCI(\u_cg_fsm/r_rate_cnt_cry[2] ), 
    .F0(\u_cg_fsm/r_rate_cnt_s[3] ), .Q0(\u_cg_fsm/r_rate_cnt[3] ), 
    .F1(\u_cg_fsm/r_rate_cnt_s[4] ), .Q1(\u_cg_fsm/r_rate_cnt[4] ), 
    .FCO(\u_cg_fsm/r_rate_cnt_cry[4] ));
  u_cg_fsm_SLICE_23 \u_cg_fsm/SLICE_23 ( .B1(\u_cg_fsm/r_rate_cnt[2] ), 
    .A1(\u_cg_fsm/r_rate_cnt ), .B0(\u_cg_fsm/r_rate_cnt[1] ), 
    .A0(\u_cg_fsm/r_rate_cnt ), .DI1(\u_cg_fsm/r_rate_cnt_s[2] ), 
    .DI0(\u_cg_fsm/r_rate_cnt_s[1] ), .CE(\u_cg_fsm/r_rate_cnte ), 
    .CLK(w_div4_clk), .FCI(\u_cg_fsm/r_rate_cnt_cry[0] ), 
    .F0(\u_cg_fsm/r_rate_cnt_s[1] ), .Q0(\u_cg_fsm/r_rate_cnt[1] ), 
    .F1(\u_cg_fsm/r_rate_cnt_s[2] ), .Q1(\u_cg_fsm/r_rate_cnt[2] ), 
    .FCO(\u_cg_fsm/r_rate_cnt_cry[2] ));
  u_cg_fsm_SLICE_24 \u_cg_fsm/SLICE_24 ( .B1(\u_cg_fsm/r_rate_cnt[0] ), 
    .A1(\u_cg_fsm/r_rate_cnt ), .B0(\u_cg_fsm/r_rate_cnt ), 
    .DI1(\u_cg_fsm/r_rate_cnt_s[0] ), .CE(\u_cg_fsm/r_rate_cnte ), 
    .CLK(w_div4_clk), .F1(\u_cg_fsm/r_rate_cnt_s[0] ), 
    .Q1(\u_cg_fsm/r_rate_cnt[0] ), .FCO(\u_cg_fsm/r_rate_cnt_cry[0] ));
  SLICE_25 SLICE_25( .B0(\sw1_max_count_num_1[6] ), .A0(\sw1_counter[7] ), 
    .CE(c_channel_0_0_sqmuxa_1_i), .FCI(sw1_counter33_cry_6), 
    .Q0(\r_channel_0[6] ), .F1(sw1_counter33), .Q1(\r_channel_0[7] ));
  SLICE_26 SLICE_26( .B1(\sw1_max_count_num_1[6] ), .A1(\sw1_counter[6] ), 
    .B0(\sw1_max_count_num_1[3] ), .A0(\sw1_counter[5] ), 
    .CE(c_channel_0_0_sqmuxa_1_i), .FCI(sw1_counter33_cry_4), 
    .Q0(\r_channel_0[4] ), .Q1(\r_channel_0[5] ), .FCO(sw1_counter33_cry_6));
  SLICE_27 SLICE_27( .B1(\sw1_max_count_num_1[1] ), .A1(\sw1_counter[4] ), 
    .B0(\sw1_max_count_num_1[3] ), .A0(\sw1_counter[3] ), 
    .CE(c_channel_0_0_sqmuxa_1_i), .FCI(sw1_counter33_cry_2), 
    .Q0(\r_channel_0[2] ), .Q1(\r_channel_0[3] ), .FCO(sw1_counter33_cry_4));
  SLICE_28 SLICE_28( .B1(\sw1_max_count_num_1[1] ), .A1(\sw1_counter[2] ), 
    .B0(\sw1_max_count_num_1[1] ), .A0(\sw1_counter[1] ), 
    .CE(c_channel_0_0_sqmuxa_1_i), .FCI(sw1_counter33_cry_0), 
    .Q0(\r_channel_0[0] ), .Q1(\r_channel_0[1] ), .FCO(sw1_counter33_cry_2));
  SLICE_29 SLICE_29( .C1(sw2_counter30_c3), .B1(un1_r_mode_3), 
    .A1(\sw1_counter[0] ), .M0(r_req_mode_transition), .CE(sw1_b_c), 
    .CLK(sw1_az), .Q0(r_ack_mode_transition), .FCO(sw1_counter33_cry_0));
  SLICE_30 SLICE_30( .C1(un1_r_ack_mode_transition), .B1(\sw1_counter[7] ), 
    .A1(sw1_counter_1_sqmuxa), .C0(un1_r_ack_mode_transition), 
    .B0(\sw1_counter[6] ), .A0(sw1_counter_1_sqmuxa), .DI1(\sw1_counter_s[7] ), 
    .DI0(\sw1_counter_s[6] ), .CLK(sw1_az), .FCI(\sw1_counter_cry[5] ), 
    .F0(\sw1_counter_s[6] ), .Q0(\sw1_counter[6] ), .F1(\sw1_counter_s[7] ), 
    .Q1(\sw1_counter[7] ));
  SLICE_31 SLICE_31( .C1(un1_r_ack_mode_transition), .B1(\sw1_counter[5] ), 
    .A1(sw1_counter_1_sqmuxa), .C0(un1_r_ack_mode_transition), 
    .B0(\sw1_counter[4] ), .A0(sw1_counter_1_sqmuxa), .DI1(\sw1_counter_s[5] ), 
    .DI0(\sw1_counter_s[4] ), .CLK(sw1_az), .FCI(\sw1_counter_cry[3] ), 
    .F0(\sw1_counter_s[4] ), .Q0(\sw1_counter[4] ), .F1(\sw1_counter_s[5] ), 
    .Q1(\sw1_counter[5] ), .FCO(\sw1_counter_cry[5] ));
  SLICE_32 SLICE_32( .C1(un1_r_ack_mode_transition), .B1(\sw1_counter[3] ), 
    .A1(sw1_counter_1_sqmuxa), .C0(un1_r_ack_mode_transition), 
    .B0(\sw1_counter[2] ), .A0(sw1_counter_1_sqmuxa), .DI1(\sw1_counter_s[3] ), 
    .DI0(\sw1_counter_s[2] ), .CLK(sw1_az), .FCI(\sw1_counter_cry[1] ), 
    .F0(\sw1_counter_s[2] ), .Q0(\sw1_counter[2] ), .F1(\sw1_counter_s[3] ), 
    .Q1(\sw1_counter[3] ), .FCO(\sw1_counter_cry[3] ));
  SLICE_33 SLICE_33( .C1(un1_r_ack_mode_transition), .B1(\sw1_counter[1] ), 
    .A1(sw1_counter_1_sqmuxa), .C0(un1_r_ack_mode_transition), 
    .B0(\sw1_counter[0] ), .A0(sw1_counter_1_sqmuxa), .DI1(\sw1_counter_s[1] ), 
    .DI0(\sw1_counter_s[0] ), .CLK(sw1_az), .FCI(sw1_counter), 
    .F0(\sw1_counter_s[0] ), .Q0(\sw1_counter[0] ), .F1(\sw1_counter_s[1] ), 
    .Q1(\sw1_counter[1] ), .FCO(\sw1_counter_cry[1] ));
  SLICE_34 SLICE_34( .C1(sw1_counter_0_sqmuxa), .B1(r_ack_mode_transition), 
    .A1(sw1_counter_0), .B0(N_4_i), .CE(c_channel_1_0_sqmuxa_1_i), 
    .Q0(\r_channel_1[0] ), .Q1(\r_channel_1[1] ), .FCO(sw1_counter));
  SLICE_35 SLICE_35( .C1(\sw2_counter[7] ), .B1(sw2_b_c), .A1(sw2_counter30), 
    .C0(\sw2_counter[6] ), .B0(sw2_b_c), .A0(sw2_counter30), 
    .DI1(\sw2_counter_s[7] ), .DI0(\sw2_counter_s[6] ), .CLK(sw2_az), 
    .FCI(\sw2_counter_cry[5] ), .F0(\sw2_counter_s[6] ), .Q0(\sw2_counter[6] ), 
    .F1(\sw2_counter_s[7] ), .Q1(\sw2_counter[7] ));
  SLICE_36 SLICE_36( .C1(\sw2_counter[5] ), .B1(sw2_b_c), .A1(sw2_counter30), 
    .C0(\sw2_counter[4] ), .B0(sw2_b_c), .A0(sw2_counter30), 
    .DI1(\sw2_counter_s[5] ), .DI0(\sw2_counter_s[4] ), .CLK(sw2_az), 
    .FCI(\sw2_counter_cry[3] ), .F0(\sw2_counter_s[4] ), .Q0(\sw2_counter[4] ), 
    .F1(\sw2_counter_s[5] ), .Q1(\sw2_counter[5] ), .FCO(\sw2_counter_cry[5] ));
  SLICE_37 SLICE_37( .C1(un1_r_mode_3), .B1(sw2_b_c), .A1(sw2_counter30), 
    .C0(\sw2_counter[2] ), .B0(sw2_b_c), .A0(sw2_counter30), 
    .DI1(\sw2_counter_s[3] ), .DI0(\sw2_counter_s[2] ), .CLK(sw2_az), 
    .FCI(\sw2_counter_cry[1] ), .F0(\sw2_counter_s[2] ), .Q0(\sw2_counter[2] ), 
    .F1(\sw2_counter_s[3] ), .Q1(un1_r_mode_3), .FCO(\sw2_counter_cry[3] ));
  SLICE_38 SLICE_38( .C1(\sw2_counter[1] ), .B1(sw2_b_c), .A1(sw2_counter30), 
    .C0(\sw2_counter[0] ), .B0(sw2_b_c), .A0(sw2_counter30), 
    .DI1(\sw2_counter_s[1] ), .DI0(\sw2_counter_s[0] ), .CLK(sw2_az), 
    .FCI(sw2_counter), .F0(\sw2_counter_s[0] ), .Q0(\sw2_counter[0] ), 
    .F1(\sw2_counter_s[1] ), .Q1(\sw2_counter[1] ), .FCO(\sw2_counter_cry[1] ));
  SLICE_39 SLICE_39( .D1(\sw1_counter[7] ), .C1(\sw1_counter[6] ), 
    .B1(\sw1_counter[5] ), .A1(\sw1_counter[4] ), .B0(sw1_b_c), .A0(CO0), 
    .DI0(\display_item_num_3[0] ), .CE(sw2_counter26_i), .CLK(sw1_az), 
    .F0(\display_item_num_3[0] ), .Q0(CO0), 
    .F1(\u_cg_fsm/u_sync_anode_phase_en/sw1_counter29lto7_5 ));
  SLICE_40 SLICE_40( .D1(CO0), .C1(\display_item_num[1] ), 
    .B1(\display_item_num[2] ), .A1(sw1_b_c), .C0(sw1_b_c), 
    .B0(\display_item_num[1] ), .A0(CO0), .DI1(\display_item_num_3[2] ), 
    .DI0(\display_item_num_3[1] ), .CE(sw2_counter26_i), .CLK(sw1_az), 
    .F0(\display_item_num_3[1] ), .Q0(\display_item_num[1] ), 
    .F1(\display_item_num_3[2] ), .Q1(\display_item_num[2] ));
  u_cg_fsm_SLICE_101 \u_cg_fsm/SLICE_101 ( .D1(\u_cg_fsm/r_sync_rate[5] ), 
    .C1(\u_cg_fsm/r_sync_rate[3] ), .B1(\u_cg_fsm/r_sync_rate[2] ), 
    .A1(\u_cg_fsm/r_sync_rate[0] ), .D0(\u_cg_fsm/r_rate_phase11_3 ), 
    .C0(\u_cg_fsm/r_rate_phase11_4 ), .B0(\u_cg_fsm/r_sync_rate[1] ), 
    .A0(\u_cg_fsm/r_sync_rate[4] ), .DI0(\u_cg_fsm/r_rate_phase11_i ), 
    .CE(\u_cg_fsm/un1_r_sync_search_disabled_channel_phase_end_p_d_g ), 
    .CLK(w_div4_clk), .F0(\u_cg_fsm/r_rate_phase11_i ), 
    .Q0(\u_cg_fsm/r_rate_phase ), .F1(\u_cg_fsm/r_rate_phase11_4 ));
  SLICE_114 SLICE_114( .M1(\u_cg_fsm/r_rate[3] ), .M0(\u_cg_fsm/r_rate[2] ), 
    .CE(\u_cg_fsm/w_sync_trigger ), .CLK(w_div4_clk), 
    .F0(\u_cg_fsm.c_stim_an[6]\000/BUF0\000/BUF0\000/BUF0 ), 
    .Q0(\u_cg_fsm/r_sync_rate[2] ), .Q1(\u_cg_fsm/r_sync_rate[3] ));
  SLICE_115 SLICE_115( .M1(\u_cg_fsm/r_rate[5] ), .M0(\u_cg_fsm/r_rate[4] ), 
    .CE(\u_cg_fsm/w_sync_trigger ), .CLK(w_div4_clk), 
    .F0(\u_cg_fsm.c_stim_an[4]\000/BUF0\000/BUF0\000/BUF0 ), 
    .Q0(\u_cg_fsm/r_sync_rate[4] ), 
    .F1(\u_cg_fsm.c_stim_an[5]\000/BUF0\000/BUF0\000/BUF0 ), 
    .Q1(\u_cg_fsm/r_sync_rate[5] ));
  SLICE_116 SLICE_116( .M1(\u_cg_fsm/r_rate[7] ), .M0(\u_cg_fsm/r_rate[6] ), 
    .CE(\u_cg_fsm/w_sync_trigger ), .CLK(w_div4_clk), 
    .F0(\u_cg_fsm.c_stim_an[2]\000/BUF0\000/BUF0\000/BUF0 ), 
    .Q0(\u_cg_fsm/r_sync_rate[6] ), 
    .F1(\u_cg_fsm.c_stim_an[3]\000/BUF0\000/BUF0\000/BUF0 ), 
    .Q1(\u_cg_fsm/r_sync_rate[7] ));
  u_cg_fsm_SLICE_117 \u_cg_fsm/SLICE_117 ( 
    .B1(\u_cg_fsm/u_sync_search_disabled_channel_phase_end_p/w_slave_ack ), 
    .A1(\u_cg_fsm/u_sync_search_disabled_channel_phase_end_p/r_master_en ), 
    .B0(\u_cg_fsm/u_sync_search_disabled_channel_phase_end_p/w_slave_ack ), 
    .A0(\u_cg_fsm/u_sync_search_disabled_channel_phase_end_p/r_slave_en[1] ), 
    .DI0(\u_cg_fsm/w_sync_search_disabled_channel_phase_end_p ), 
    .CLK(w_div4_clk), 
    .F0(\u_cg_fsm/w_sync_search_disabled_channel_phase_end_p ), 
    .Q0(\u_cg_fsm/r_sync_search_disabled_channel_phase_end_p_d ), 
    .F1(\u_cg_fsm/u_sync_search_disabled_channel_phase_end_p/r_slave_en8 ));
  u_cg_fsm_SLICE_118 \u_cg_fsm/SLICE_118 ( 
    .B1(\u_cg_fsm/u_sync_trigger/w_slave_ack ), 
    .A1(\u_cg_fsm/u_sync_trigger/r_master_en ), 
    .B0(\u_cg_fsm/u_sync_trigger/w_slave_ack ), 
    .A0(\u_cg_fsm/u_sync_trigger/r_slave_en_0[1] ), 
    .DI0(\u_cg_fsm/w_sync_trigger ), .CLK(w_div4_clk), 
    .F0(\u_cg_fsm/w_sync_trigger ), .Q0(\u_cg_fsm/r_sync_trigger_d ), 
    .F1(\u_cg_fsm/u_sync_trigger/r_slave_en8 ));
  SLICE_119 SLICE_119( .CE(\u_cg_fsm/u_sync_anode_phase_en/un1_i_men_1_0 ), 
    .F0(\u_cg_fsm.c_stim_an[0]\000/BUF0\000/BUF0\000/BUF0 ), 
    .Q0(\u_cg_fsm/u_sync_anode_phase_en/r_master_en ), 
    .F1(\u_cg_fsm.c_stim_an[1]\000/BUF0\000/BUF0\000/BUF0 ));
  SLICE_120 SLICE_120( .M1(\u_cg_fsm/u_sync_anode_phase_en/r_slave_en[0] ), 
    .M0(\u_cg_fsm/u_sync_anode_phase_en/r_master_en ), 
    .CE(\u_cg_fsm/u_sync_anode_phase_en/r_slave_en8 ), .CLK(w_div4_clk), 
    .F0(\u_cg_fsm.r_channel_0[1]\000/BUF0\000/BUF0\000/BUF0 ), 
    .Q0(\u_cg_fsm/u_sync_anode_phase_en/r_slave_en[0] ), 
    .F1(\u_cg_fsm.r_channel_0[2]\000/BUF0\000/BUF0\000/BUF0 ), 
    .Q1(\u_cg_fsm/r_slave_en_1[1] ));
  SLICE_121 SLICE_121( .CE(\u_cg_fsm/u_sync_cathod_phase_en/un1_i_men_1 ), 
    .F0(\u_cg_fsm.r_stim_bcg1_sel_2[2]\000/BUF0\000/BUF0\000/BUF0 ), 
    .Q0(\u_cg_fsm/u_sync_cathod_phase_en/r_master_en ), 
    .F1(\u_cg_fsm.r_channel_0[0]\000/BUF0\000/BUF0\000/BUF0 ));
  SLICE_122 SLICE_122( .M1(\u_cg_fsm/u_sync_cathod_phase_en/r_slave_en[0] ), 
    .M0(\u_cg_fsm/u_sync_cathod_phase_en/r_master_en ), 
    .CE(\u_cg_fsm/u_sync_cathod_phase_en/r_slave_en8 ), .CLK(w_div4_clk), 
    .F0(\u_cg_fsm.r_stim_bcg1_sel_2[0]\000/BUF0\000/BUF0\000/BUF0 ), 
    .Q0(\u_cg_fsm/u_sync_cathod_phase_en/r_slave_en[0] ), 
    .F1(\u_cg_fsm.r_stim_bcg1_sel_2[1]\000/BUF0\000/BUF0\000/BUF0 ), 
    .Q1(\u_cg_fsm/r_slave_en_0[1] ));
  u_cg_fsm_u_sync_fsm_trigger_SLICE_123 
    \u_cg_fsm/u_sync_fsm_trigger/SLICE_123 ( .C1(\u_cg_fsm/r_rate_phase ), 
    .B1(\u_cg_fsm/w_rate_tmout_0_data_tmp_i[3] ), 
    .A1(\u_cg_fsm/w_slave_ack_2 ), 
    .B0(\u_cg_fsm/w_rate_tmout_0_data_tmp_i[3] ), .A0(\u_cg_fsm/r_rate_phase ), 
    .DI0(\u_cg_fsm/u_sync_fsm_trigger/w_fsm_trigger ), 
    .CE(\u_cg_fsm/u_sync_fsm_trigger/r_master_en_RNO_0_0 ), .CLK(w_div4_clk), 
    .F0(\u_cg_fsm/u_sync_fsm_trigger/w_fsm_trigger ), 
    .Q0(\u_cg_fsm/u_sync_fsm_trigger/r_master_en ), 
    .F1(\u_cg_fsm/u_sync_fsm_trigger/r_master_en_RNO_0_0 ));
  SLICE_124 SLICE_124( 
    .CE(\u_cg_fsm/u_sync_search_disabled_channel_phase_end_p/r_master_en_RNO_0 ), 
    .F0(\u_cg_fsm.c_stim_ca[6]\000/BUF0\000/BUF0\000/BUF0 ), 
    .Q0(\u_cg_fsm/u_sync_search_disabled_channel_phase_end_p/r_master_en ), 
    .F1(\u_cg_fsm.c_stim_ca[7]\000/BUF0\000/BUF0\000/BUF0 ));
  SLICE_125 SLICE_125( 
    .M1(\u_cg_fsm/u_sync_search_disabled_channel_phase_end_p/r_slave_en[0] ), 
    .M0(\u_cg_fsm/u_sync_search_disabled_channel_phase_end_p/r_master_en ), 
    .CE(\u_cg_fsm/u_sync_search_disabled_channel_phase_end_p/r_slave_en8 ), 
    .CLK(w_div4_clk), .F0(\u_cg_fsm.c_stim_ca[4]\000/BUF0\000/BUF0\000/BUF0 ), 
    .Q0(\u_cg_fsm/u_sync_search_disabled_channel_phase_end_p/r_slave_en[0] ), 
    .F1(\u_cg_fsm.c_stim_ca[5]\000/BUF0\000/BUF0\000/BUF0 ), 
    .Q1(\u_cg_fsm/u_sync_search_disabled_channel_phase_end_p/r_slave_en[1] ));
  SLICE_126 SLICE_126( 
    .M0(\u_cg_fsm/u_sync_search_disabled_channel_phase_end_p/r_slave_en[1] ), 
    .CE(\u_cg_fsm/u_sync_search_disabled_channel_phase_end_p/r_slave_en8 ), 
    .CLK(w_div4_clk), .F0(\u_cg_fsm.c_stim_ca[2]\000/BUF0\000/BUF0\000/BUF0 ), 
    .Q0(\u_cg_fsm/u_sync_search_disabled_channel_phase_end_p/w_slave_ack ), 
    .F1(\u_cg_fsm.c_stim_ca[3]\000/BUF0\000/BUF0\000/BUF0 ));
  SLICE_127 SLICE_127( .CE(\u_cg_fsm/u_sync_trigger/r_master_en_RNO ), 
    .F0(\u_cg_fsm.c_stim_ca[0]\000/BUF0\000/BUF0\000/BUF0 ), 
    .Q0(\u_cg_fsm/u_sync_trigger/r_master_en ), 
    .F1(\u_cg_fsm.c_stim_ca[1]\000/BUF0\000/BUF0\000/BUF0 ));
  SLICE_129 SLICE_129( .M1(\u_cg_fsm/u_sync_trigger/r_master_en ), 
    .M0(\u_cg_fsm/u_sync_trigger/r_slave_en[0] ), 
    .CE(\u_cg_fsm/u_sync_trigger/r_slave_en8 ), .CLK(w_div4_clk), 
    .F0(\u_cg_fsm.r_dac_amp_0[7]\000/BUF0\000/BUF0\000/BUF0 ), 
    .Q0(\u_cg_fsm/u_sync_trigger/r_slave_en_0[1] ), 
    .F1(\u_cg_fsm.c_stim_comp_en_n\000/BUF0\000/BUF0\000/BUF0 ), 
    .Q1(\u_cg_fsm/u_sync_trigger/r_slave_en[0] ));
  SLICE_130 SLICE_130( .M0(\u_cg_fsm/u_sync_trigger/r_slave_en_0[1] ), 
    .CE(\u_cg_fsm/u_sync_trigger/r_slave_en8 ), .CLK(w_div4_clk), 
    .F0(\u_cg_fsm.r_dac_amp_0[5]\000/BUF0\000/BUF0\000/BUF0 ), 
    .Q0(\u_cg_fsm/u_sync_trigger/w_slave_ack ), 
    .F1(\u_cg_fsm.r_dac_amp_0[6]\000/BUF0\000/BUF0\000/BUF0 ));
  SLICE_131 SLICE_131( 
    .F0(\u_cg_fsm.r_dac_amp_0[3]\000/BUF0\000/BUF0\000/BUF0 ), 
    .Q0(\u_cg_fsm/w_debug_fsm_led[2] ), 
    .F1(\u_cg_fsm.r_dac_amp_0[4]\000/BUF0\000/BUF0\000/BUF0 ), 
    .Q1(\led_out_c[15] ));
  SLICE_132 SLICE_132( .CE(\u_cg_fsm/r_anode_phase_RNO ), 
    .F0(\u_cg_fsm.r_dac_amp_0[1]\000/BUF0\000/BUF0\000/BUF0 ), 
    .Q0(\u_cg_fsm/w_debug_fsm_led[3] ), 
    .F1(\u_cg_fsm.r_dac_amp_0[2]\000/BUF0\000/BUF0\000/BUF0 ));
  SLICE_133 SLICE_133( .CE(\u_cg_fsm/un1_c_next_state_0_sqmuxa_1_i ), 
    .F0(\u_cg_fsm.r_stim_dac1_val_2[7]\000/BUF0\000/BUF0\000/BUF0 ), 
    .Q0(\u_cg_fsm/w_debug_fsm_led[4] ), 
    .F1(\u_cg_fsm.r_dac_amp_0[0]\000/BUF0\000/BUF0\000/BUF0 ));
  SLICE_134 SLICE_134( .CE(\u_cg_fsm/r_cathod_phase_RNO ), 
    .F0(\u_cg_fsm.r_stim_dac1_val_2[5]\000/BUF0\000/BUF0\000/BUF0 ), 
    .Q0(\u_cg_fsm/w_debug_fsm_led[5] ), 
    .F1(\u_cg_fsm.r_stim_dac1_val_2[6]\000/BUF0\000/BUF0\000/BUF0 ));
  SLICE_135 SLICE_135( .M0(\u_cg_fsm/r_slave_en_0[1] ), 
    .CE(\u_cg_fsm/u_sync_cathod_phase_en/r_slave_en8 ), .CLK(w_div4_clk), 
    .F0(\u_cg_fsm.r_stim_dac1_val_2[3]\000/BUF0\000/BUF0\000/BUF0 ), 
    .Q0(\u_cg_fsm/w_slave_ack_0 ), 
    .F1(\u_cg_fsm.r_stim_dac1_val_2[4]\000/BUF0\000/BUF0\000/BUF0 ));
  SLICE_136 SLICE_136( .M0(\u_cg_fsm/r_slave_en_1[1] ), 
    .CE(\u_cg_fsm/u_sync_anode_phase_en/r_slave_en8 ), .CLK(w_div4_clk), 
    .F0(\u_cg_fsm.r_stim_dac1_val_2[1]\000/BUF0\000/BUF0\000/BUF0 ), 
    .Q0(\u_cg_fsm/w_slave_ack_1 ), 
    .F1(\u_cg_fsm.r_stim_dac1_val_2[2]\000/BUF0\000/BUF0\000/BUF0 ));
  SLICE_137 SLICE_137( .CE(\u_cg_fsm/u_sync_fsm_trigger/r_slave_en8 ), 
    .F0(\u_cg_fsm.c_stim_an[7]\000/BUF0\000/BUF0\000/BUF0 ), 
    .Q0(\u_cg_fsm/w_slave_ack_2 ), 
    .F1(\u_cg_fsm.r_stim_dac1_val_2[0]\000/BUF0\000/BUF0\000/BUF0 ), 
    .Q1(\u_cg_fsm/r_slave_en_2[1] ));
  SLICE_138 SLICE_138( .CE(\u_trigger_en/r_slave_en8 ), .F0(VCC), 
    .Q0(\u_trigger_en.r_slave_en[1] ), .F1(GND));
  SLICE_139 SLICE_139( .B1(\u_trigger_en.w_slave_ack ), 
    .A1(\u_trigger_en/r_master_en ), .B0(\u_cg_fsm/r_sync_rate[7] ), 
    .A0(\u_cg_fsm/r_sync_rate[6] ), .CE(\u_trigger_en/r_slave_en8 ), 
    .F0(\u_cg_fsm/r_rate_phase11_3 ), .Q0(\u_trigger_en.w_slave_ack ), 
    .F1(\u_trigger_en/r_slave_en8 ));
  SLICE_140 SLICE_140( .B1(\u_cg_fsm/r_channel_0_0[5] ), 
    .A1(\u_cg_fsm/r_channel_0_0[4] ), .D0(\u_cg_fsm/r_channel_1_0[7] ), 
    .C0(\u_cg_fsm/r_channel_1_0[6] ), .B0(\u_cg_fsm/r_channel_1_0[5] ), 
    .A0(\u_cg_fsm/r_channel_1_0[4] ), .CE(\u_trigger_en/un1_i_men_1_1 ), 
    .F0(\u_cg_fsm/N_252 ), .Q0(\u_trigger_en/r_master_en ), 
    .F1(\u_cg_fsm/c_stim_ca_0_0_o2_1[0] ));
  SLICE_141 SLICE_141( .D1(\u_cg_fsm/led_out_1_sn_N_8 ), 
    .C1(\u_cg_fsm/led_out_1_sn_N_7 ), 
    .B1(\u_cg_fsm/u_sync_anode_phase_en/N_81 ), 
    .A1(\u_cg_fsm/u_sync_anode_phase_en/N_72 ), .B0(\u_cg_fsm/w_slave_ack_2 ), 
    .A0(\u_cg_fsm/u_sync_fsm_trigger/r_master_en ), 
    .F0(\u_cg_fsm/u_sync_fsm_trigger/r_slave_en8 ), .Q0(w_div4_clk), 
    .F1(\led_out_c[3] ));
  u_cg_fsm_led_out_1_5_1__SLICE_142 \u_cg_fsm/led_out_1_5[1]/SLICE_142 ( 
    .C1(\r_duration[1] ), .B1(\r_channel_1[1] ), .A1(\display_item_num[2] ), 
    .C0(\r_rate[1] ), .B0(\r_channel_0[1] ), .A0(\display_item_num[2] ), 
    .M0(CO0), .OFX0(\u_cg_fsm/N_70 ));
  u_cg_fsm_u_sync_anode_phase_en_led_out_1_6_7__SLICE_143 
    \u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[7]/SLICE_143 ( 
    .C1(\u_cg_fsm/w_debug_fsm_led[7] ), .B1(\r_dac_amp_0[7] ), 
    .A1(\display_item_num[2] ), .C0(sw2_counter26), .B0(\sw1_counter[7] ), 
    .A0(\r_dac_amp_1[7] ), .M0(\u_cg_fsm/led_out_1_sn_N_6 ), 
    .OFX0(\u_cg_fsm/u_sync_anode_phase_en/N_85 ));
  u_cg_fsm_u_sync_anode_phase_en_led_out_1_0__SLICE_144 
    \u_cg_fsm/u_sync_anode_phase_en/led_out_1[0]/SLICE_144 ( 
    .C1(\sw2_counter[0] ), .B1(pb_p_test), .A1(\led_out_c[15] ), 
    .C0(\u_cg_fsm/led_out_1_sn_N_7 ), 
    .B0(\u_cg_fsm/u_sync_anode_phase_en/N_78 ), 
    .A0(\u_cg_fsm/u_sync_anode_phase_en/N_69 ), 
    .M0(\u_cg_fsm/led_out_1_sn_N_8 ), .OFX0(\led_out_c[0] ));
  u_cg_fsm_u_sync_anode_phase_en_led_out_1_6_5__SLICE_145 
    \u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[5]/SLICE_145 ( 
    .C1(\u_cg_fsm/w_debug_fsm_led[5] ), .B1(\r_dac_amp_0[5] ), 
    .A1(\display_item_num[2] ), .C0(sw2_counter26), .B0(\sw1_counter[5] ), 
    .A0(\r_dac_amp_1[5] ), .M0(\u_cg_fsm/led_out_1_sn_N_6 ), 
    .OFX0(\u_cg_fsm/u_sync_anode_phase_en/N_83 ));
  u_cg_fsm_u_sync_anode_phase_en_led_out_1_6_4__SLICE_146 
    \u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[4]/SLICE_146 ( 
    .C1(\u_cg_fsm/w_debug_fsm_led[4] ), .B1(\r_dac_amp_0[4] ), 
    .A1(\display_item_num[2] ), .C0(sw2_counter26), .B0(\sw1_counter[4] ), 
    .A0(\r_dac_amp_1[4] ), .M0(\u_cg_fsm/led_out_1_sn_N_6 ), 
    .OFX0(\u_cg_fsm/u_sync_anode_phase_en/N_82 ));
  u_cg_fsm_u_sync_anode_phase_en_led_out_1_6_3__SLICE_147 
    \u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[3]/SLICE_147 ( 
    .C1(\u_cg_fsm/w_debug_fsm_led[3] ), .B1(\r_dac_amp_0[3] ), 
    .A1(\display_item_num[2] ), .C0(sw2_counter26), .B0(\sw1_counter[3] ), 
    .A0(\r_dac_amp_1[3] ), .M0(\u_cg_fsm/led_out_1_sn_N_6 ), 
    .OFX0(\u_cg_fsm/u_sync_anode_phase_en/N_81 ));
  u_cg_fsm_u_sync_anode_phase_en_led_out_1_6_0__SLICE_148 
    \u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[0]/SLICE_148 ( 
    .D1(\u_cg_fsm/r_state[3] ), .C1(\u_cg_fsm/r_state[1] ), 
    .B1(\r_dac_amp_0[0] ), .A1(\display_item_num[2] ), .C0(sw2_counter26), 
    .B0(\sw1_counter[0] ), .A0(\r_dac_amp_1[0] ), 
    .M0(\u_cg_fsm/led_out_1_sn_N_6 ), 
    .OFX0(\u_cg_fsm/u_sync_anode_phase_en/N_78 ));
  u_cg_fsm_u_sync_anode_phase_en_sw1_max_count_num_1_1__SLICE_149 
    \u_cg_fsm/u_sync_anode_phase_en/sw1_max_count_num_1[1]/SLICE_149 ( 
    .C1(\sw2_counter[2] ), .B1(\sw2_counter[1] ), .A1(\sw2_counter[0] ), 
    .D0(\sw2_counter[7] ), .C0(\sw2_counter[2] ), .B0(\sw2_counter[1] ), 
    .A0(\sw2_counter[0] ), .M0(\polarity_c[2] ), 
    .OFX0(\sw1_max_count_num_1[1] ));
  u_cg_fsm_u_sync_anode_phase_en_un1_c_dac_amp_0_0_sqmuxa_0__SLICE_150 
    \u_cg_fsm/u_sync_anode_phase_en/un1_c_dac_amp_0_0_sqmuxa[0]/SLICE_150 ( 
    .B1(sw2_counter26_ac0_1), .A1(\sw2_counter[2] ), .D0(w_sw1_pb_p), 
    .C0(\sw2_counter[2] ), .B0(\sw2_counter[1] ), .A0(\sw2_counter[0] ), 
    .M0(\polarity_c[2] ), .OFX0(\un1_c_dac_amp_0_0_sqmuxa[0] ));
  u_cg_fsm_u_sync_anode_phase_en_led_out_1_5_7__SLICE_151 
    \u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[7]/SLICE_151 ( 
    .C1(\r_duration[7] ), .B1(\r_channel_1[7] ), .A1(\display_item_num[2] ), 
    .C0(\r_rate[7] ), .B0(\r_channel_0[7] ), .A0(\display_item_num[2] ), 
    .M0(CO0), .OFX0(\u_cg_fsm/u_sync_anode_phase_en/N_76 ));
  u_cg_fsm_u_sync_anode_phase_en_led_out_1_5_5__SLICE_152 
    \u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[5]/SLICE_152 ( 
    .C1(\r_duration[5] ), .B1(\r_channel_1[5] ), .A1(\display_item_num[2] ), 
    .C0(\r_rate[5] ), .B0(\r_channel_0[5] ), .A0(\display_item_num[2] ), 
    .M0(CO0), .OFX0(\u_cg_fsm/u_sync_anode_phase_en/N_74 ));
  u_cg_fsm_u_sync_anode_phase_en_led_out_1_5_4__SLICE_153 
    \u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[4]/SLICE_153 ( 
    .C1(\r_duration[4] ), .B1(\r_channel_1[4] ), .A1(\display_item_num[2] ), 
    .C0(\r_rate[4] ), .B0(\r_channel_0[4] ), .A0(\display_item_num[2] ), 
    .M0(CO0), .OFX0(\u_cg_fsm/u_sync_anode_phase_en/N_73 ));
  u_cg_fsm_u_sync_anode_phase_en_led_out_1_5_3__SLICE_154 
    \u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[3]/SLICE_154 ( 
    .C1(\r_duration[3] ), .B1(\r_channel_1[3] ), .A1(\display_item_num[2] ), 
    .C0(\r_rate[3] ), .B0(\r_channel_0[3] ), .A0(\display_item_num[2] ), 
    .M0(CO0), .OFX0(\u_cg_fsm/u_sync_anode_phase_en/N_72 ));
  u_cg_fsm_u_sync_anode_phase_en_led_out_1_5_0__SLICE_155 
    \u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[0]/SLICE_155 ( 
    .C1(\r_duration[0] ), .B1(\r_channel_1[0] ), .A1(\display_item_num[2] ), 
    .C0(\r_rate[0] ), .B0(\r_channel_0[0] ), .A0(\display_item_num[2] ), 
    .M0(CO0), .OFX0(\u_cg_fsm/u_sync_anode_phase_en/N_69 ));
  u_cg_fsm_led_out_1_2__SLICE_156 \u_cg_fsm/led_out_1[2]/SLICE_156 ( 
    .C1(\sw2_counter[2] ), .B1(r_req_mode_transition), .A1(\led_out_c[15] ), 
    .C0(\u_cg_fsm/led_out_1_sn_N_7 ), .B0(\u_cg_fsm/N_80 ), 
    .A0(\u_cg_fsm/N_71 ), .M0(\u_cg_fsm/led_out_1_sn_N_8 ), 
    .OFX0(\led_out_c[2] ));
  u_cg_fsm_led_out_1_1__SLICE_157 \u_cg_fsm/led_out_1[1]/SLICE_157 ( 
    .C1(\sw2_counter[1] ), .B1(r_ack_mode_transition), .A1(\led_out_c[15] ), 
    .C0(\u_cg_fsm/led_out_1_sn_N_7 ), .B0(\u_cg_fsm/N_79 ), 
    .A0(\u_cg_fsm/N_70 ), .M0(\u_cg_fsm/led_out_1_sn_N_8 ), 
    .OFX0(\led_out_c[1] ));
  u_cg_fsm_led_out_1_6_6__SLICE_158 \u_cg_fsm/led_out_1_6[6]/SLICE_158 ( 
    .C1(\u_cg_fsm/w_rate_tmout_0_data_tmp_i[3] ), .B1(\r_dac_amp_0[6] ), 
    .A1(\display_item_num[2] ), .C0(sw2_counter26), .B0(\sw1_counter[6] ), 
    .A0(\r_dac_amp_1[6] ), .M0(\u_cg_fsm/led_out_1_sn_N_6 ), 
    .OFX0(\u_cg_fsm/N_84 ));
  u_cg_fsm_led_out_1_6_2__SLICE_159 \u_cg_fsm/led_out_1_6[2]/SLICE_159 ( 
    .C1(\u_cg_fsm/w_debug_fsm_led[2] ), .B1(\r_dac_amp_0[2] ), 
    .A1(\display_item_num[2] ), .C0(sw2_counter26), .B0(\sw1_counter[2] ), 
    .A0(\r_dac_amp_1[2] ), .M0(\u_cg_fsm/led_out_1_sn_N_6 ), 
    .OFX0(\u_cg_fsm/N_80 ));
  u_cg_fsm_led_out_1_6_1__SLICE_160 \u_cg_fsm/led_out_1_6[1]/SLICE_160 ( 
    .D1(\u_cg_fsm/r_state[3] ), .C1(\u_cg_fsm/r_state[2] ), 
    .B1(\r_dac_amp_0[1] ), .A1(\display_item_num[2] ), .C0(sw2_counter26), 
    .B0(\sw1_counter[1] ), .A0(\r_dac_amp_1[1] ), 
    .M0(\u_cg_fsm/led_out_1_sn_N_6 ), .OFX0(\u_cg_fsm/N_79 ));
  u_cg_fsm_led_out_1_5_6__SLICE_161 \u_cg_fsm/led_out_1_5[6]/SLICE_161 ( 
    .C1(\r_duration[6] ), .B1(\r_channel_1[6] ), .A1(\display_item_num[2] ), 
    .C0(\r_rate[6] ), .B0(\r_channel_0[6] ), .A0(\display_item_num[2] ), 
    .M0(CO0), .OFX0(\u_cg_fsm/N_75 ));
  u_cg_fsm_led_out_1_5_2__SLICE_162 \u_cg_fsm/led_out_1_5[2]/SLICE_162 ( 
    .C1(\r_duration[2] ), .B1(\r_channel_1[2] ), .A1(\display_item_num[2] ), 
    .C0(\r_rate[2] ), .B0(\r_channel_0[2] ), .A0(\display_item_num[2] ), 
    .M0(CO0), .OFX0(\u_cg_fsm/N_71 ));
  SLICE_163 SLICE_163( .D1(\u_cg_fsm/un1_w_disabled_dac_sel_found_4 ), 
    .C1(\u_cg_fsm/un1_w_disabled_dac_sel_found_3 ), 
    .B1(\u_cg_fsm/un1_w_disabled_dac_sel_found_2 ), 
    .A1(\u_cg_fsm/r_search_disabled_channel_phase ), 
    .D0(\u_trigger_en.r_slave_en[1] ), .C0(\u_trigger_en.w_slave_ack ), 
    .B0(\u_cg_fsm/r_search_disabled_channel_phase ), 
    .A0(\u_cg_fsm/r_master_en_2_1 ), .CE(un1_w_async_ack_mode_transition_p), 
    .F0(\u_cg_fsm/r_search_disabled_channel_phase_RNI843J1 ), 
    .Q0(r_req_mode_transition), .F1(\u_cg_fsm/r_master_en_2_1 ));
  SLICE_164 SLICE_164( .D1(sw2_counter30_c3), .C1(un1_r_mode_3), .B1(sw2_b_c), 
    .A1(sw2_counter26), .D0(\sw2_counter[0] ), .C0(\sw2_counter[1] ), 
    .B0(\sw2_counter[2] ), .A0(un1_r_mode_3), .CE(c_channel_1_0_sqmuxa_1_i), 
    .F0(sw2_counter26), .Q0(\r_channel_1[2] ), .F1(N_9_i), 
    .Q1(\r_channel_1[3] ));
  SLICE_165 SLICE_165( .D1(\sw2_counter[2] ), .C1(\sw2_counter[1] ), 
    .B1(\sw2_counter[0] ), .A1(\polarity_c[2] ), .B0(sw2_counter30_c3), 
    .A0(un1_r_mode_3), .CE(\un1_c_dac_amp_0_0_sqmuxa[0] ), 
    .F0(sw2_counter_lcry_0_RNO_0), .Q0(\r_dac_amp_0[0] ), 
    .F1(sw2_counter30_c3), .Q1(\r_dac_amp_0[1] ));
  u_cg_fsm_SLICE_166 \u_cg_fsm/SLICE_166 ( .C1(\sw2_counter[2] ), 
    .B1(\sw2_counter[1] ), .A1(\sw2_counter[0] ), .D0(\r_db_sw1_pb_d[0] ), 
    .C0(\r_db_sw1_pb_d[1] ), .B0(\polarity_c[2] ), 
    .A0(\u_cg_fsm/u_sync_anode_phase_en/sw1_max_count_num15 ), 
    .CE(\u_cg_fsm/r_interval_cnte ), .F0(c_duration_0_sqmuxa_1_i), 
    .Q0(\u_cg_fsm/r_interval_cnt[6] ), 
    .F1(\u_cg_fsm/u_sync_anode_phase_en/sw1_max_count_num15 ), 
    .Q1(\u_cg_fsm/r_interval_cnt[7] ));
  u_cg_fsm_SLICE_167 \u_cg_fsm/SLICE_167 ( .D1(\sw2_counter[7] ), 
    .C1(\sw2_counter[2] ), .B1(\sw2_counter[1] ), .A1(\sw2_counter[0] ), 
    .D0(\r_db_sw1_pb_d[0] ), .C0(\r_db_sw1_pb_d[1] ), .B0(\polarity_c[2] ), 
    .A0(\u_cg_fsm/u_sync_anode_phase_en/c_channel_1_0_sqmuxa_2 ), 
    .CE(\u_cg_fsm/un1_i_polarity_1 ), .F0(c_channel_1_0_sqmuxa_1_i), 
    .Q0(\u_cg_fsm/r_channel_1[0] ), 
    .F1(\u_cg_fsm/u_sync_anode_phase_en/c_channel_1_0_sqmuxa_2 ), 
    .Q1(\u_cg_fsm/r_channel_1[1] ));
  u_cg_fsm_SLICE_168 \u_cg_fsm/SLICE_168 ( .D1(sw2_counter26), 
    .C1(\led_out_c[15] ), .B1(\display_item_num[2] ), .A1(\u_cg_fsm/CO1 ), 
    .D0(\u_cg_fsm/led_out_1_sn_N_8 ), .C0(\u_cg_fsm/led_out_1_sn_N_7 ), 
    .B0(\u_cg_fsm/u_sync_anode_phase_en/N_85 ), 
    .A0(\u_cg_fsm/u_sync_anode_phase_en/N_76 ), 
    .CE(\u_cg_fsm/un1_i_polarity_1 ), .F0(\led_out_c[7] ), 
    .Q0(\u_cg_fsm/r_duration[4] ), .F1(\u_cg_fsm/led_out_1_sn_N_8 ), 
    .Q1(\u_cg_fsm/r_duration[5] ));
  u_cg_fsm_SLICE_169 \u_cg_fsm/SLICE_169 ( .B1(sw2_counter26), 
    .A1(\display_item_num[1] ), .D0(\u_cg_fsm/led_out_1_sn_N_8 ), 
    .C0(\u_cg_fsm/led_out_1_sn_N_7 ), 
    .B0(\u_cg_fsm/u_sync_anode_phase_en/N_83 ), 
    .A0(\u_cg_fsm/u_sync_anode_phase_en/N_74 ), 
    .CE(\u_cg_fsm/un1_i_polarity_1 ), .F0(\led_out_c[5] ), 
    .Q0(\u_cg_fsm/r_duration[2] ), .F1(\u_cg_fsm/led_out_1_sn_N_7 ), 
    .Q1(\u_cg_fsm/r_duration[3] ));
  u_cg_fsm_SLICE_170 \u_cg_fsm/SLICE_170 ( .C1(\sw2_counter[2] ), 
    .B1(\sw2_counter[1] ), .A1(\sw2_counter[0] ), 
    .C0(\u_cg_fsm/u_sync_anode_phase_en/un1_sw1_max_count_num14_1 ), 
    .B0(\sw1_max_count_num_3[6] ), .A0(\polarity_c[2] ), 
    .CE(\u_cg_fsm/un1_i_polarity_1 ), .F0(\sw1_max_count_num_1[3] ), 
    .Q0(\u_cg_fsm/r_rate[0] ), 
    .F1(\u_cg_fsm/u_sync_anode_phase_en/un1_sw1_max_count_num14_1 ), 
    .Q1(\u_cg_fsm/r_rate[1] ));
  SLICE_171 SLICE_171( .B1(\r_db_sw1_pb_d[1] ), .A1(\r_db_sw1_pb_d[0] ), 
    .D0(w_sw1_pb_p), 
    .C0(\u_cg_fsm/u_sync_anode_phase_en/c_dac_amp_1_0_sqmuxa_1 ), 
    .B0(\u_cg_fsm/u_sync_anode_phase_en/sw1_max_count_num15 ), 
    .A0(\polarity_c[2] ), .CE(\u_cg_fsm/un1_i_polarity_1 ), 
    .F0(\un1_c_dac_amp_1_0_sqmuxa_1_i[0] ), .Q0(\u_cg_fsm/r_channel_1_0[4] ), 
    .F1(w_sw1_pb_p), .Q1(\u_cg_fsm/r_channel_1_0[5] ));
  SLICE_172 SLICE_172( .B1(\sw2_counter[1] ), .A1(\sw2_counter[0] ), 
    .D0(w_sw1_pb_p), .C0(\sw2_counter[2] ), .B0(sw2_counter26_ac0_1), 
    .A0(\polarity_c[2] ), .CE(\u_cg_fsm/un1_i_polarity_1 ), 
    .F0(c_rate_1_sqmuxa_i), .Q0(\u_cg_fsm/r_channel_1_0[6] ), 
    .F1(sw2_counter26_ac0_1), .Q1(\u_cg_fsm/r_channel_1_0[7] ));
  SLICE_173 SLICE_173( .D1(\sw2_counter[7] ), .C1(\sw2_counter[2] ), 
    .B1(\sw2_counter[1] ), .A1(\sw2_counter[0] ), 
    .C0(\u_cg_fsm/u_sync_anode_phase_en/un1_sw1_max_count_num14_1 ), 
    .B0(\sw1_max_count_num_3[6] ), .A0(\polarity_c[2] ), 
    .CE(\u_cg_fsm/un1_i_polarity_1 ), .F0(\sw1_max_count_num_1[6] ), 
    .Q0(\u_cg_fsm/r_rate[2] ), .F1(\sw1_max_count_num_3[6] ), 
    .Q1(\u_cg_fsm/r_rate[3] ));
  SLICE_174 SLICE_174( .C1(un1_r_mode_NE), 
    .B1(\r_async_ack_mode_transition[2] ), 
    .A1(\r_async_ack_mode_transition[1] ), .D0(un1_r_mode_3), 
    .C0(\u_cg_fsm/u_sync_anode_phase_en/un1_r_mode_NE_1 ), 
    .B0(\sw2_counter[0] ), .A0(\r_mode[0] ), .CE(\u_cg_fsm/un1_i_polarity_1 ), 
    .F0(un1_r_mode_NE), .Q0(\u_cg_fsm/r_rate[6] ), 
    .F1(un1_w_async_ack_mode_transition_p), .Q1(\u_cg_fsm/r_rate[7] ));
  u_cg_fsm_SLICE_175 \u_cg_fsm/SLICE_175 ( .D1(sw1_b_c), .C1(sw2_counter26), 
    .B1(\u_cg_fsm/u_sync_anode_phase_en/sw1_counter29lto7_4 ), 
    .A1(\u_cg_fsm/u_sync_anode_phase_en/sw1_counter29lto7_5 ), 
    .D0(\sw1_counter[3] ), .C0(\sw1_counter[2] ), .B0(\sw1_counter[1] ), 
    .A0(\sw1_counter[0] ), .CE(\u_cg_fsm/r_interval_cnte ), 
    .F0(\u_cg_fsm/u_sync_anode_phase_en/sw1_counter29lto7_4 ), 
    .Q0(\u_cg_fsm/r_interval_cnt[2] ), .F1(N_4_i), 
    .Q1(\u_cg_fsm/r_interval_cnt[3] ));
  u_cg_fsm_SLICE_176 \u_cg_fsm/SLICE_176 ( 
    .D1(\u_cg_fsm/w_sync_cathod_phase_en ), 
    .C1(\u_cg_fsm/w_duration_tmout_0_data_tmp_i[3] ), 
    .B1(\u_cg_fsm/w_slave_ack_1 ), .A1(\u_cg_fsm/r_slave_en_1[1] ), 
    .B0(\u_cg_fsm/w_slave_ack_0 ), .A0(\u_cg_fsm/r_slave_en_0[1] ), 
    .CE(\u_cg_fsm/r_search_disabled_channel_phase_RNI843J1 ), 
    .F0(\u_cg_fsm/w_sync_cathod_phase_en ), 
    .Q0(\u_cg_fsm/r_search_disabled_channel[0] ), 
    .F1(\u_cg_fsm/r_duration_cnt ), 
    .Q1(\u_cg_fsm/r_search_disabled_channel[1] ));
  u_cg_fsm_SLICE_177 \u_cg_fsm/SLICE_177 ( 
    .D1(\u_cg_fsm.w_search_disabled_channel_phase_end_p ), 
    .C1(\u_cg_fsm/w_slave_ack_2 ), .B1(\u_cg_fsm/r_slave_en_2[1] ), 
    .A1(\u_cg_fsm/r_search_disabled_channel_phase ), 
    .C0(\u_cg_fsm/r_state[1] ), .B0(\u_cg_fsm/w_debug_fsm_led[7] ), 
    .A0(\u_cg_fsm/w_slave_ack_0 ), 
    .CE(\u_cg_fsm/r_search_disabled_channel_phase_RNI843J1 ), 
    .F0(\u_cg_fsm/u_sync_cathod_phase_en/un1_i_men_1 ), 
    .Q0(\u_cg_fsm/r_search_disabled_channel[4] ), 
    .F1(\u_cg_fsm/w_debug_fsm_led[7] ), 
    .Q1(\u_cg_fsm/r_search_disabled_channel[5] ));
  SLICE_178 SLICE_178( .B1(\u_cg_fsm/r_channel_1_0[3] ), .A1(\u_cg_fsm/N_252 ), 
    .D0(\u_cg_fsm/r_channel_1[0] ), .C0(\u_cg_fsm/r_channel_1[2] ), 
    .B0(\u_cg_fsm/N_187 ), .A0(\u_cg_fsm/r_channel_1[1] ), 
    .CE(\un1_c_dac_amp_1_0_sqmuxa_1_i[0] ), .F0(\u_cg_fsm/N_192 ), 
    .Q0(\r_dac_amp_1[4] ), .F1(\u_cg_fsm/N_187 ), .Q1(\r_dac_amp_1[5] ));
  u_cg_fsm_SLICE_179 \u_cg_fsm/SLICE_179 ( .D1(\u_cg_fsm.r_channel_0[2] ), 
    .C1(\u_cg_fsm.r_channel_0[1] ), .B1(\u_cg_fsm.r_channel_0[0] ), 
    .A1(\u_cg_fsm/c_stim_ca_0_0_o2[0] ), 
    .D0(\u_cg_fsm/un1_w_disabled_dac_sel_found_0 ), 
    .C0(\u_cg_fsm/r_search_disabled_channel[6] ), .B0(\u_cg_fsm/N_105 ), 
    .A0(\u_cg_fsm/N_96 ), .M1(\u_cg_fsm/r_duration[7] ), 
    .M0(\u_cg_fsm/r_duration[6] ), .CE(\u_cg_fsm/w_sync_trigger ), 
    .CLK(w_div4_clk), .F0(\u_cg_fsm/un1_w_disabled_dac_sel_found_3 ), 
    .Q0(\u_cg_fsm/r_duration_cnt15_6 ), .F1(\u_cg_fsm/N_105 ), 
    .Q1(\u_cg_fsm/r_duration_cnt15_7 ));
  u_cg_fsm_SLICE_180 \u_cg_fsm/SLICE_180 ( .D1(\u_cg_fsm/r_channel_1[2] ), 
    .C1(\u_cg_fsm/r_channel_1[1] ), .B1(\u_cg_fsm/r_channel_1[0] ), 
    .A1(\u_cg_fsm/N_187 ), .D0(\u_cg_fsm/un1_w_disabled_dac_sel_found_1 ), 
    .C0(\u_cg_fsm/r_search_disabled_channel[3] ), 
    .B0(\u_cg_fsm/c_map_cathod_channel_023 ), .A0(\u_cg_fsm/N_101 ), 
    .M1(\u_cg_fsm/r_rate[1] ), .M0(\u_cg_fsm/r_rate[0] ), 
    .CE(\u_cg_fsm/w_sync_trigger ), .CLK(w_div4_clk), 
    .F0(\u_cg_fsm/un1_w_disabled_dac_sel_found_4 ), 
    .Q0(\u_cg_fsm/r_sync_rate[0] ), .F1(\u_cg_fsm/N_101 ), 
    .Q1(\u_cg_fsm/r_sync_rate[1] ));
  u_cg_fsm_SLICE_181 \u_cg_fsm/SLICE_181 ( .D1(\u_cg_fsm.r_channel_0[2] ), 
    .C1(\u_cg_fsm.r_channel_0[1] ), .B1(\u_cg_fsm.r_channel_0[0] ), 
    .A1(\u_cg_fsm/c_stim_ca_0_0_o2[0] ), 
    .D0(\u_cg_fsm/un2_w_disabled_dac_sel_found[1] ), 
    .C0(\u_cg_fsm/r_search_disabled_channel[0] ), .B0(\u_cg_fsm/N_193 ), 
    .A0(\u_cg_fsm/N_192 ), .M1(\u_cg_fsm/r_duration[1] ), 
    .M0(\u_cg_fsm/r_duration[0] ), .CE(\u_cg_fsm/w_sync_trigger ), 
    .CLK(w_div4_clk), .F0(\u_cg_fsm/un1_w_disabled_dac_sel_found_0 ), 
    .Q0(\u_cg_fsm/r_duration_cnt15_0 ), .F1(\u_cg_fsm/N_193 ), 
    .Q1(\u_cg_fsm/r_duration_cnt15_1 ));
  u_cg_fsm_SLICE_182 \u_cg_fsm/SLICE_182 ( 
    .B1(\u_cg_fsm/c_map_cathod_channel_125 ), 
    .A1(\u_cg_fsm/c_map_cathod_channel_025 ), 
    .D0(\u_cg_fsm/r_search_disabled_channel[5] ), 
    .C0(\u_cg_fsm/r_search_disabled_channel[2] ), 
    .B0(\u_cg_fsm/c_map_cathod_channel[5] ), 
    .A0(\u_cg_fsm/c_map_cathod_channel[2] ), .M1(\u_cg_fsm/r_duration[3] ), 
    .M0(\u_cg_fsm/r_duration[2] ), .CE(\u_cg_fsm/w_sync_trigger ), 
    .CLK(w_div4_clk), .F0(\u_cg_fsm/un1_w_disabled_dac_sel_found_1 ), 
    .Q0(\u_cg_fsm/r_duration_cnt15_2 ), 
    .F1(\u_cg_fsm/c_map_cathod_channel[5] ), 
    .Q1(\u_cg_fsm/r_duration_cnt15_3 ));
  u_cg_fsm_SLICE_183 \u_cg_fsm/SLICE_183 ( .C1(\u_cg_fsm/r_channel_1[1] ), 
    .B1(\u_cg_fsm/r_channel_1[0] ), .A1(\u_cg_fsm/N_86_0 ), 
    .D0(\u_cg_fsm/un2_w_disabled_dac_sel_found[4] ), 
    .C0(\u_cg_fsm/r_search_disabled_channel[7] ), 
    .B0(\u_cg_fsm/c_map_cathod_channel_027 ), .A0(\u_cg_fsm/N_207 ), 
    .M1(\u_cg_fsm/r_duration[5] ), .M0(\u_cg_fsm/r_duration[4] ), 
    .CE(\u_cg_fsm/w_sync_trigger ), .CLK(w_div4_clk), 
    .F0(\u_cg_fsm/un1_w_disabled_dac_sel_found_2 ), 
    .Q0(\u_cg_fsm/r_duration_cnt15_4 ), .F1(\u_cg_fsm/N_207 ), 
    .Q1(\u_cg_fsm/r_duration_cnt15_5 ));
  SLICE_184 SLICE_184( .D1(\u_cg_fsm.r_channel_0[2] ), 
    .C1(\u_cg_fsm.r_channel_0[1] ), .B1(\u_cg_fsm.r_channel_0[0] ), 
    .A1(\u_cg_fsm/c_stim_ca_0_0_o2[0] ), 
    .C0(\u_cg_fsm/r_search_disabled_channel[4] ), .B0(\u_cg_fsm/N_102 ), 
    .A0(\u_cg_fsm/N_99 ), .F0(\u_cg_fsm/un2_w_disabled_dac_sel_found[4] ), 
    .Q0(\r_async_ack_mode_transition[2] ), .F1(\u_cg_fsm/N_102 ), 
    .Q1(\r_db_sw1_pb_d[0] ));
  SLICE_185 SLICE_185( .D1(\u_cg_fsm/r_channel_1[2] ), 
    .C1(\u_cg_fsm/r_channel_1[1] ), .B1(\u_cg_fsm/r_channel_1[0] ), 
    .A1(\u_cg_fsm/N_187 ), .C0(\u_cg_fsm/r_search_disabled_channel[1] ), 
    .B0(\u_cg_fsm/N_100 ), .A0(\u_cg_fsm/N_97 ), 
    .F0(\u_cg_fsm/un2_w_disabled_dac_sel_found[1] ), .Q0(pb_p_test), 
    .F1(\u_cg_fsm/N_97 ), .Q1(\r_async_ack_mode_transition[1] ));
  u_cg_fsm_SLICE_186 \u_cg_fsm/SLICE_186 ( .D1(\u_cg_fsm/r_sync_rate[4] ), 
    .C1(\u_cg_fsm/r_sync_rate[1] ), .B1(\u_cg_fsm/r_rate_phase11_4 ), 
    .A1(\u_cg_fsm/r_rate_phase11_3 ), 
    .D0(\u_cg_fsm/w_rate_tmout_0_data_tmp_i[3] ), 
    .C0(\u_cg_fsm/r_sync_trigger_d ), .B0(\u_cg_fsm/r_rate_phase11 ), 
    .A0(\u_cg_fsm/r_rate_phase ), .CE(\u_cg_fsm/un1_i_polarity_1 ), 
    .F0(\u_cg_fsm/r_rate_cnte ), .Q0(\u_cg_fsm.r_channel_0[0] ), 
    .F1(\u_cg_fsm/r_rate_phase11 ), .Q1(\u_cg_fsm.r_channel_0[1] ));
  SLICE_187 SLICE_187( .D1(\u_cg_fsm/r_channel_0_0[7] ), 
    .C1(\u_cg_fsm/r_channel_0_0[6] ), .B1(\u_cg_fsm/r_channel_0_0[3] ), 
    .A1(\u_cg_fsm/c_stim_ca_0_0_o2_1[0] ), .D0(\u_cg_fsm.r_channel_0[2] ), 
    .C0(\u_cg_fsm.r_channel_0[1] ), .B0(\u_cg_fsm.r_channel_0[0] ), 
    .A0(\u_cg_fsm/c_stim_ca_0_0_o2[0] ), .CE(c_duration_0_sqmuxa_1_i), 
    .F0(\u_cg_fsm/N_100 ), .Q0(\r_duration[0] ), 
    .F1(\u_cg_fsm/c_stim_ca_0_0_o2[0] ), .Q1(\r_duration[1] ));
  SLICE_188 SLICE_188( .C1(\u_cg_fsm/N_252 ), .B1(\u_cg_fsm/r_channel_1_0[3] ), 
    .A1(\u_cg_fsm/r_channel_1[2] ), .C0(\u_cg_fsm/r_channel_1[1] ), 
    .B0(\u_cg_fsm/r_channel_1[0] ), .A0(\u_cg_fsm/N_86_0 ), 
    .CE(\un1_c_dac_amp_1_0_sqmuxa_1_i[0] ), .F0(\u_cg_fsm/N_99 ), 
    .Q0(\r_dac_amp_1[0] ), .F1(\u_cg_fsm/N_86_0 ), .Q1(\r_dac_amp_1[1] ));
  SLICE_189 SLICE_189( .D1(\u_cg_fsm/r_channel_1_0[3] ), 
    .C1(\u_cg_fsm/r_channel_1[1] ), .B1(\u_cg_fsm/c_map_cathod_channel_122_1 ), 
    .A1(\u_cg_fsm/N_252 ), .B0(\u_cg_fsm/c_map_cathod_channel_122 ), 
    .A0(\u_cg_fsm/c_map_cathod_channel_022 ), 
    .CE(\un1_c_dac_amp_0_0_sqmuxa[0] ), 
    .F0(\u_cg_fsm/c_map_cathod_channel[2] ), .Q0(\r_dac_amp_0[2] ), 
    .F1(\u_cg_fsm/c_map_cathod_channel_122 ), .Q1(\r_dac_amp_0[3] ));
  SLICE_190 SLICE_190( .C1(\u_cg_fsm/r_sync_cathod_phase[2] ), 
    .B1(\u_cg_fsm/r_sync_cathod_phase[1] ), .A1(\u_cg_fsm/r_state[2] ), 
    .C0(\u_cg_fsm/w_debug_fsm_led[4] ), 
    .B0(\u_cg_fsm/w_interval_tmout_0_data_tmp_i[3] ), 
    .A0(\u_cg_fsm/c_next_state_0_sqmuxa ), .CE(c_rate_1_sqmuxa_i), 
    .F0(\u_cg_fsm/un1_c_next_state_0_sqmuxa_1_i ), .Q0(\r_rate[6] ), 
    .F1(\u_cg_fsm/c_next_state_0_sqmuxa ), .Q1(\r_rate[7] ));
  SLICE_191 SLICE_191( .D1(\u_cg_fsm/r_slave_en_1[1] ), 
    .C1(\u_cg_fsm/w_slave_ack_1 ), 
    .B1(\u_cg_fsm/w_duration_tmout_0_data_tmp_i[3] ), 
    .A1(\u_cg_fsm/w_sync_cathod_phase_en ), .D0(\u_cg_fsm/w_debug_fsm_led[5] ), 
    .C0(\u_cg_fsm/w_debug_fsm_led[3] ), .B0(\u_cg_fsm/r_duration_cnt19 ), 
    .A0(\u_cg_fsm/r_duration_cnt15 ), .CE(c_rate_1_sqmuxa_i), 
    .F0(\u_cg_fsm/r_duration_cnte ), .Q0(\r_rate[4] ), 
    .F1(\u_cg_fsm/r_duration_cnt19 ), .Q1(\r_rate[5] ));
  SLICE_192 SLICE_192( .B1(\u_cg_fsm/r_channel_1[1] ), 
    .A1(\u_cg_fsm/r_channel_1[0] ), .D0(\u_cg_fsm/r_channel_1_0[3] ), 
    .C0(\u_cg_fsm/r_channel_1[2] ), .B0(\u_cg_fsm/c_map_cathod_channel_125_1 ), 
    .A0(\u_cg_fsm/N_252 ), .CE(\un1_c_dac_amp_1_0_sqmuxa_1_i[0] ), 
    .F0(\u_cg_fsm/c_map_cathod_channel_125 ), .Q0(\r_dac_amp_1[6] ), 
    .F1(\u_cg_fsm/c_map_cathod_channel_125_1 ), .Q1(\r_dac_amp_1[7] ));
  SLICE_193 SLICE_193( .B1(w_trigger_en), .A1(\u_trigger_en.w_slave_ack ), 
    .D0(\r_db_sw1_pb_d[0] ), .C0(\r_db_sw1_pb_d[1] ), .B0(\polarity_c[2] ), 
    .A0(sw2_counter26), .F0(w_trigger_en), .F1(\u_trigger_en/un1_i_men_1_1 ));
  SLICE_194 SLICE_194( .D1(\u_cg_fsm.r_channel_0[2] ), 
    .C1(\u_cg_fsm.r_channel_0[1] ), .B1(\u_cg_fsm.r_channel_0[0] ), 
    .A1(\u_cg_fsm/c_stim_ca_0_0_o2[0] ), .D0(\u_cg_fsm.r_channel_0[2] ), 
    .C0(\u_cg_fsm.r_channel_0[1] ), .B0(\u_cg_fsm.r_channel_0[0] ), 
    .A0(\u_cg_fsm/c_stim_ca_0_0_o2[0] ), .CE(\un1_c_dac_amp_0_0_sqmuxa[0] ), 
    .F0(\u_cg_fsm/c_map_cathod_channel_023 ), .Q0(\r_dac_amp_0[4] ), 
    .F1(\u_cg_fsm/c_map_cathod_channel_022 ), .Q1(\r_dac_amp_0[5] ));
  SLICE_195 SLICE_195( .D1(\u_cg_fsm.r_channel_0[2] ), 
    .C1(\u_cg_fsm.r_channel_0[1] ), .B1(\u_cg_fsm.r_channel_0[0] ), 
    .A1(\u_cg_fsm/c_stim_ca_0_0_o2[0] ), .D0(\u_cg_fsm.r_channel_0[2] ), 
    .C0(\u_cg_fsm.r_channel_0[1] ), .B0(\u_cg_fsm.r_channel_0[0] ), 
    .A0(\u_cg_fsm/c_stim_ca_0_0_o2[0] ), .CE(\un1_c_dac_amp_0_0_sqmuxa[0] ), 
    .F0(\u_cg_fsm/c_map_cathod_channel_025 ), .Q0(\r_dac_amp_0[6] ), 
    .F1(\u_cg_fsm/c_map_cathod_channel_027 ), .Q1(\r_dac_amp_0[7] ));
  SLICE_196 SLICE_196( .D1(un1_r_mode_3), .C1(\sw2_counter[2] ), 
    .B1(\sw2_counter[1] ), .A1(\sw2_counter[0] ), .C0(\sw2_counter[2] ), 
    .B0(\sw2_counter[1] ), .A0(\sw2_counter[0] ), 
    .CE(\u_cg_fsm/un1_i_polarity_1 ), 
    .F0(\u_cg_fsm/u_sync_anode_phase_en/c_dac_amp_1_0_sqmuxa_1 ), 
    .Q0(\u_cg_fsm/r_channel_1[2] ), .F1(sw2_counter26_i), 
    .Q1(\u_cg_fsm/r_channel_1_0[3] ));
  u_cg_fsm_SLICE_197 \u_cg_fsm/SLICE_197 ( .D1(\u_cg_fsm/led_out_1_sn_N_8 ), 
    .C1(\u_cg_fsm/led_out_1_sn_N_7 ), .B1(\u_cg_fsm/N_84 ), 
    .A1(\u_cg_fsm/N_75 ), .D0(\u_cg_fsm/led_out_1_sn_N_8 ), 
    .C0(\u_cg_fsm/led_out_1_sn_N_7 ), 
    .B0(\u_cg_fsm/u_sync_anode_phase_en/N_82 ), 
    .A0(\u_cg_fsm/u_sync_anode_phase_en/N_73 ), 
    .CE(\u_cg_fsm/un1_i_polarity_1 ), .F0(\led_out_c[4] ), 
    .Q0(\u_cg_fsm/r_duration[0] ), .F1(\led_out_c[6] ), 
    .Q1(\u_cg_fsm/r_duration[1] ));
  u_cg_fsm_SLICE_198 \u_cg_fsm/SLICE_198 ( .B1(sw1_b_c), .A1(sw2_counter26), 
    .B0(sw2_counter26), .A0(sw1_b_c), .CE(\u_cg_fsm/r_interval_cnte ), 
    .F0(sw1_counter_1_sqmuxa), .Q0(\u_cg_fsm/r_interval_cnt[4] ), 
    .F1(sw1_counter_0), .Q1(\u_cg_fsm/r_interval_cnt[5] ));
  u_cg_fsm_SLICE_199 \u_cg_fsm/SLICE_199 ( .B1(\display_item_num[1] ), 
    .A1(CO0), .C0(sw2_counter26), .B0(\display_item_num[1] ), .A0(CO0), 
    .CE(\u_cg_fsm/un1_i_polarity_1 ), .F0(\u_cg_fsm/led_out_1_sn_N_6 ), 
    .Q0(\u_cg_fsm/r_duration[6] ), .F1(\u_cg_fsm/CO1 ), 
    .Q1(\u_cg_fsm/r_duration[7] ));
  u_cg_fsm_SLICE_200 \u_cg_fsm/SLICE_200 ( .D1(\u_trigger_en.r_slave_en[1] ), 
    .C1(\u_trigger_en.w_slave_ack ), .B1(\u_cg_fsm/r_master_en_2_1 ), 
    .A1(\u_cg_fsm/r_disabled_dac_sel_found_d ), 
    .C0(\u_cg_fsm/r_disabled_dac_sel_found_d ), 
    .B0(\u_cg_fsm/r_master_en_2_1 ), 
    .A0(\u_cg_fsm/u_sync_search_disabled_channel_phase_end_p/w_slave_ack ), 
    .CE(\u_cg_fsm/r_search_disabled_channel_phase_RNI843J1 ), 
    .F0(\u_cg_fsm/u_sync_search_disabled_channel_phase_end_p/r_master_en_RNO_0 ), 
    .Q0(\u_cg_fsm/r_search_disabled_channel[6] ), 
    .F1(\u_cg_fsm/r_search_disabled_channel_phase_RNO ), 
    .Q1(\u_cg_fsm/r_search_disabled_channel[7] ));
  u_cg_fsm_SLICE_201 \u_cg_fsm/SLICE_201 ( .C1(\u_trigger_en.r_slave_en[1] ), 
    .B1(\u_trigger_en.w_slave_ack ), .A1(\polarity_c[2] ), 
    .C0(\u_trigger_en.r_slave_en[1] ), .B0(\u_trigger_en.w_slave_ack ), 
    .A0(\u_cg_fsm/u_sync_trigger/w_slave_ack ), 
    .CE(\u_cg_fsm/r_search_disabled_channel_phase_RNO ), 
    .F0(\u_cg_fsm/u_sync_trigger/r_master_en_RNO ), 
    .Q0(\u_cg_fsm/r_search_disabled_channel_phase ), 
    .F1(\u_cg_fsm/un1_i_polarity_1 ));
  u_cg_fsm_SLICE_202 \u_cg_fsm/SLICE_202 ( .C1(sw1_counter33), 
    .B1(sw2_counter26), .A1(r_ack_mode_transition), .B0(sw2_counter26), 
    .A0(sw1_counter33), .CE(\u_cg_fsm/un1_i_polarity_1 ), 
    .F0(sw1_counter_0_sqmuxa), .Q0(\u_cg_fsm/r_channel_0_0[4] ), 
    .F1(un1_r_ack_mode_transition), .Q1(\u_cg_fsm/r_channel_0_0[5] ));
  SLICE_203 SLICE_203( .C1(sw2_counter30_c3), .B1(un1_r_mode_3), .A1(sw2_b_c), 
    .B0(un1_r_mode_3), .A0(sw2_counter30_c3), .CE(c_channel_1_0_sqmuxa_1_i), 
    .F0(sw2_counter30), .Q0(\r_channel_1[4] ), .F1(sw2_counter_lcry_0_RNO_1), 
    .Q1(\r_channel_1[5] ));
  u_cg_fsm_SLICE_204 \u_cg_fsm/SLICE_204 ( .D1(\sw2_counter[2] ), 
    .C1(\sw2_counter[1] ), .B1(\r_mode[2] ), .A1(\r_mode[1] ), .D0(w_sw1_pb_p), 
    .C0(\sw2_counter[2] ), .B0(sw2_counter26_ac0_1), .A0(\polarity_c[2] ), 
    .CE(\u_cg_fsm/un1_i_polarity_1 ), .F0(c_channel_0_0_sqmuxa_1_i), 
    .Q0(\u_cg_fsm/r_channel_0_0[6] ), 
    .F1(\u_cg_fsm/u_sync_anode_phase_en/un1_r_mode_NE_1 ), 
    .Q1(\u_cg_fsm/r_channel_0_0[7] ));
  u_cg_fsm_SLICE_205 \u_cg_fsm/SLICE_205 ( .D1(\u_cg_fsm/r_slave_en_1[1] ), 
    .C1(\u_cg_fsm/w_slave_ack_1 ), 
    .B1(\u_cg_fsm/w_duration_tmout_0_data_tmp_i[3] ), 
    .A1(\u_cg_fsm/w_debug_fsm_led[3] ), .B0(\u_cg_fsm/w_slave_ack_1 ), 
    .A0(\u_cg_fsm/u_sync_anode_phase_en/r_master_en ), 
    .CE(\u_cg_fsm/r_interval_cnte ), 
    .F0(\u_cg_fsm/u_sync_anode_phase_en/r_slave_en8 ), 
    .Q0(\u_cg_fsm/r_interval_cnt[0] ), .F1(\u_cg_fsm/r_anode_phase_RNO ), 
    .Q1(\u_cg_fsm/r_interval_cnt[1] ));
  u_cg_fsm_SLICE_206 \u_cg_fsm/SLICE_206 ( .C1(\u_cg_fsm/w_debug_fsm_led[4] ), 
    .B1(\u_cg_fsm/w_interval_tmout_0_data_tmp_i[3] ), 
    .A1(\u_cg_fsm/c_next_state_0_sqmuxa ), .C0(\u_cg_fsm/r_state[3] ), 
    .B0(\u_cg_fsm/w_debug_fsm_led[4] ), .A0(\u_cg_fsm/w_slave_ack_1 ), 
    .CE(\u_cg_fsm/un1_i_polarity_1 ), 
    .F0(\u_cg_fsm/u_sync_anode_phase_en/un1_i_men_1_0 ), 
    .Q0(\u_cg_fsm/r_rate[4] ), .F1(\u_cg_fsm/r_interval_cnte ), 
    .Q1(\u_cg_fsm/r_rate[5] ));
  u_cg_fsm_SLICE_207 \u_cg_fsm/SLICE_207 ( .D1(\u_cg_fsm/r_slave_en_0[1] ), 
    .C1(\u_cg_fsm/w_slave_ack_0 ), 
    .B1(\u_cg_fsm/w_duration_tmout_0_data_tmp_i[3] ), 
    .A1(\u_cg_fsm/w_debug_fsm_led[5] ), .B0(\u_cg_fsm/w_slave_ack_0 ), 
    .A0(\u_cg_fsm/u_sync_cathod_phase_en/r_master_en ), 
    .CE(\u_cg_fsm/r_search_disabled_channel_phase_RNI843J1 ), 
    .F0(\u_cg_fsm/u_sync_cathod_phase_en/r_slave_en8 ), 
    .Q0(\u_cg_fsm/r_search_disabled_channel[2] ), 
    .F1(\u_cg_fsm/r_cathod_phase_RNO ), 
    .Q1(\u_cg_fsm/r_search_disabled_channel[3] ));
  SLICE_208 SLICE_208( .B1(\u_cg_fsm/r_channel_1[2] ), 
    .A1(\u_cg_fsm/r_channel_1[0] ), .C0(\u_cg_fsm/r_channel_1[1] ), 
    .B0(\u_cg_fsm/r_channel_1[0] ), .A0(\u_cg_fsm/N_86_0 ), 
    .CE(\un1_c_dac_amp_1_0_sqmuxa_1_i[0] ), .F0(\u_cg_fsm/N_96 ), 
    .Q0(\r_dac_amp_1[2] ), .F1(\u_cg_fsm/c_map_cathod_channel_122_1 ), 
    .Q1(\r_dac_amp_1[3] ));
  u_cg_fsm_SLICE_209 \u_cg_fsm/SLICE_209 ( 
    .B1(\u_cg_fsm/r_sync_search_disabled_channel_phase_end_p_d ), 
    .A1(\u_cg_fsm/r_rate_phase11 ), 
    .C0(\u_cg_fsm/w_rate_tmout_0_data_tmp_i[3] ), 
    .B0(\u_cg_fsm/r_sync_trigger_d ), .A0(\u_cg_fsm/r_rate_phase11 ), 
    .CE(\u_cg_fsm/un1_i_polarity_1 ), .F0(\u_cg_fsm/r_rate_cnt ), 
    .Q0(\u_cg_fsm.r_channel_0[2] ), 
    .F1(\u_cg_fsm/un1_r_sync_search_disabled_channel_phase_end_p_d_g ), 
    .Q1(\u_cg_fsm/r_channel_0_0[3] ));
  SLICE_210 SLICE_210( .B1(\u_cg_fsm/r_master_en_2_1 ), 
    .A1(\u_cg_fsm/r_disabled_dac_sel_found_d ), 
    .B0(\u_cg_fsm/w_debug_fsm_led[7] ), .A0(\u_cg_fsm/r_state[1] ), 
    .F0(\u_cg_fsm.c_cathod_phase_en_0_sqmuxa ), .Q0(\r_db_sw1_pb_d[1] ), 
    .F1(\u_cg_fsm.w_search_disabled_channel_phase_end_p ), .Q1(\r_mode[0] ));
  led_out_0_ \led_out[0]_I ( .PADDO(\led_out_c[0] ), .ledout0(led_out[0]));
  i_rst_n i_rst_n_I( .PADDI(i_rst_n_c), .i_rst_n(i_rst_n));
  stim_bcg1_sel_2_ \stim_bcg1_sel[2]_I ( .IOLDO(\stim_bcg1_sel_c[2] ), 
    .stimbcg1sel2(stim_bcg1_sel[2]));
  stim_bcg1_sel_2__MGIOL \stim_bcg1_sel[2]_MGIOL ( 
    .IOLDO(\stim_bcg1_sel_c[2] ), 
    .OPOS(\u_cg_fsm.r_stim_bcg1_sel_2[2]\000/BUF0\000/BUF0\000/BUF0 ), 
    .CE(\u_cg_fsm.w_search_disabled_channel_phase_end_p ));
  stim_bcg1_sel_1_ \stim_bcg1_sel[1]_I ( .IOLDO(\stim_bcg1_sel_c[1] ), 
    .stimbcg1sel1(stim_bcg1_sel[1]));
  stim_bcg1_sel_1__MGIOL \stim_bcg1_sel[1]_MGIOL ( 
    .IOLDO(\stim_bcg1_sel_c[1] ), 
    .OPOS(\u_cg_fsm.r_stim_bcg1_sel_2[1]\000/BUF0\000/BUF0\000/BUF0 ), 
    .CE(\u_cg_fsm.w_search_disabled_channel_phase_end_p ));
  stim_bcg1_sel_0_ \stim_bcg1_sel[0]_I ( .IOLDO(\stim_bcg1_sel_c[0] ), 
    .stimbcg1sel0(stim_bcg1_sel[0]));
  stim_bcg1_sel_0__MGIOL \stim_bcg1_sel[0]_MGIOL ( 
    .IOLDO(\stim_bcg1_sel_c[0] ), 
    .OPOS(\u_cg_fsm.r_stim_bcg1_sel_2[0]\000/BUF0\000/BUF0\000/BUF0 ), 
    .CE(\u_cg_fsm.w_search_disabled_channel_phase_end_p ));
  stim_bcg0_sel_2_ \stim_bcg0_sel[2]_I ( .IOLDO(\stim_bcg0_sel_c[2] ), 
    .stimbcg0sel2(stim_bcg0_sel[2]));
  stim_bcg0_sel_2__MGIOL \stim_bcg0_sel[2]_MGIOL ( 
    .IOLDO(\stim_bcg0_sel_c[2] ), 
    .OPOS(\u_cg_fsm.r_channel_0[2]\000/BUF0\000/BUF0\000/BUF0 ), 
    .CE(\u_cg_fsm.w_search_disabled_channel_phase_end_p ));
  stim_bcg0_sel_1_ \stim_bcg0_sel[1]_I ( .IOLDO(\stim_bcg0_sel_c[1] ), 
    .stimbcg0sel1(stim_bcg0_sel[1]));
  stim_bcg0_sel_1__MGIOL \stim_bcg0_sel[1]_MGIOL ( 
    .IOLDO(\stim_bcg0_sel_c[1] ), 
    .OPOS(\u_cg_fsm.r_channel_0[1]\000/BUF0\000/BUF0\000/BUF0 ), 
    .CE(\u_cg_fsm.w_search_disabled_channel_phase_end_p ));
  stim_bcg0_sel_0_ \stim_bcg0_sel[0]_I ( .IOLDO(\stim_bcg0_sel_c[0] ), 
    .stimbcg0sel0(stim_bcg0_sel[0]));
  stim_bcg0_sel_0__MGIOL \stim_bcg0_sel[0]_MGIOL ( 
    .IOLDO(\stim_bcg0_sel_c[0] ), 
    .OPOS(\u_cg_fsm.r_channel_0[0]\000/BUF0\000/BUF0\000/BUF0 ), 
    .CE(\u_cg_fsm.w_search_disabled_channel_phase_end_p ));
  stim_dac1_val_7_ \stim_dac1_val[7]_I ( .IOLDO(\stim_dac1_val_c[7] ), 
    .stimdac1val7(stim_dac1_val[7]));
  stim_dac1_val_7__MGIOL \stim_dac1_val[7]_MGIOL ( 
    .IOLDO(\stim_dac1_val_c[7] ), 
    .OPOS(\u_cg_fsm.r_stim_dac1_val_2[7]\000/BUF0\000/BUF0\000/BUF0 ), 
    .CE(\u_cg_fsm.c_cathod_phase_en_0_sqmuxa ));
  stim_dac1_val_6_ \stim_dac1_val[6]_I ( .IOLDO(\stim_dac1_val_c[6] ), 
    .stimdac1val6(stim_dac1_val[6]));
  stim_dac1_val_6__MGIOL \stim_dac1_val[6]_MGIOL ( 
    .IOLDO(\stim_dac1_val_c[6] ), 
    .OPOS(\u_cg_fsm.r_stim_dac1_val_2[6]\000/BUF0\000/BUF0\000/BUF0 ), 
    .CE(\u_cg_fsm.c_cathod_phase_en_0_sqmuxa ));
  stim_dac1_val_5_ \stim_dac1_val[5]_I ( .IOLDO(\stim_dac1_val_c[5] ), 
    .stimdac1val5(stim_dac1_val[5]));
  stim_dac1_val_5__MGIOL \stim_dac1_val[5]_MGIOL ( 
    .IOLDO(\stim_dac1_val_c[5] ), 
    .OPOS(\u_cg_fsm.r_stim_dac1_val_2[5]\000/BUF0\000/BUF0\000/BUF0 ), 
    .CE(\u_cg_fsm.c_cathod_phase_en_0_sqmuxa ));
  stim_dac1_val_4_ \stim_dac1_val[4]_I ( .IOLDO(\stim_dac1_val_c[4] ), 
    .stimdac1val4(stim_dac1_val[4]));
  stim_dac1_val_4__MGIOL \stim_dac1_val[4]_MGIOL ( 
    .IOLDO(\stim_dac1_val_c[4] ), 
    .OPOS(\u_cg_fsm.r_stim_dac1_val_2[4]\000/BUF0\000/BUF0\000/BUF0 ), 
    .CE(\u_cg_fsm.c_cathod_phase_en_0_sqmuxa ));
  stim_dac1_val_3_ \stim_dac1_val[3]_I ( .IOLDO(\stim_dac1_val_c[3] ), 
    .stimdac1val3(stim_dac1_val[3]));
  stim_dac1_val_3__MGIOL \stim_dac1_val[3]_MGIOL ( 
    .IOLDO(\stim_dac1_val_c[3] ), 
    .OPOS(\u_cg_fsm.r_stim_dac1_val_2[3]\000/BUF0\000/BUF0\000/BUF0 ), 
    .CE(\u_cg_fsm.c_cathod_phase_en_0_sqmuxa ));
  stim_dac1_val_2_ \stim_dac1_val[2]_I ( .IOLDO(\stim_dac1_val_c[2] ), 
    .stimdac1val2(stim_dac1_val[2]));
  stim_dac1_val_2__MGIOL \stim_dac1_val[2]_MGIOL ( 
    .IOLDO(\stim_dac1_val_c[2] ), 
    .OPOS(\u_cg_fsm.r_stim_dac1_val_2[2]\000/BUF0\000/BUF0\000/BUF0 ), 
    .CE(\u_cg_fsm.c_cathod_phase_en_0_sqmuxa ));
  stim_dac1_val_1_ \stim_dac1_val[1]_I ( .IOLDO(\stim_dac1_val_c[1] ), 
    .stimdac1val1(stim_dac1_val[1]));
  stim_dac1_val_1__MGIOL \stim_dac1_val[1]_MGIOL ( 
    .IOLDO(\stim_dac1_val_c[1] ), 
    .OPOS(\u_cg_fsm.r_stim_dac1_val_2[1]\000/BUF0\000/BUF0\000/BUF0 ), 
    .CE(\u_cg_fsm.c_cathod_phase_en_0_sqmuxa ));
  stim_dac1_val_0_ \stim_dac1_val[0]_I ( .IOLDO(\stim_dac1_val_c[0] ), 
    .stimdac1val0(stim_dac1_val[0]));
  stim_dac1_val_0__MGIOL \stim_dac1_val[0]_MGIOL ( 
    .IOLDO(\stim_dac1_val_c[0] ), 
    .OPOS(\u_cg_fsm.r_stim_dac1_val_2[0]\000/BUF0\000/BUF0\000/BUF0 ), 
    .CE(\u_cg_fsm.c_cathod_phase_en_0_sqmuxa ));
  stim_dac0_val_7_ \stim_dac0_val[7]_I ( .IOLDO(\stim_dac0_val_c[7] ), 
    .stimdac0val7(stim_dac0_val[7]));
  stim_dac0_val_7__MGIOL \stim_dac0_val[7]_MGIOL ( 
    .IOLDO(\stim_dac0_val_c[7] ), 
    .OPOS(\u_cg_fsm.r_dac_amp_0[7]\000/BUF0\000/BUF0\000/BUF0 ), 
    .CE(\u_cg_fsm.c_cathod_phase_en_0_sqmuxa ));
  stim_dac0_val_6_ \stim_dac0_val[6]_I ( .IOLDO(\stim_dac0_val_c[6] ), 
    .stimdac0val6(stim_dac0_val[6]));
  stim_dac0_val_6__MGIOL \stim_dac0_val[6]_MGIOL ( 
    .IOLDO(\stim_dac0_val_c[6] ), 
    .OPOS(\u_cg_fsm.r_dac_amp_0[6]\000/BUF0\000/BUF0\000/BUF0 ), 
    .CE(\u_cg_fsm.c_cathod_phase_en_0_sqmuxa ));
  stim_dac0_val_5_ \stim_dac0_val[5]_I ( .IOLDO(\stim_dac0_val_c[5] ), 
    .stimdac0val5(stim_dac0_val[5]));
  stim_dac0_val_5__MGIOL \stim_dac0_val[5]_MGIOL ( 
    .IOLDO(\stim_dac0_val_c[5] ), 
    .OPOS(\u_cg_fsm.r_dac_amp_0[5]\000/BUF0\000/BUF0\000/BUF0 ), 
    .CE(\u_cg_fsm.c_cathod_phase_en_0_sqmuxa ));
  stim_dac0_val_4_ \stim_dac0_val[4]_I ( .IOLDO(\stim_dac0_val_c[4] ), 
    .stimdac0val4(stim_dac0_val[4]));
  stim_dac0_val_4__MGIOL \stim_dac0_val[4]_MGIOL ( 
    .IOLDO(\stim_dac0_val_c[4] ), 
    .OPOS(\u_cg_fsm.r_dac_amp_0[4]\000/BUF0\000/BUF0\000/BUF0 ), 
    .CE(\u_cg_fsm.c_cathod_phase_en_0_sqmuxa ));
  stim_dac0_val_3_ \stim_dac0_val[3]_I ( .IOLDO(\stim_dac0_val_c[3] ), 
    .stimdac0val3(stim_dac0_val[3]));
  stim_dac0_val_3__MGIOL \stim_dac0_val[3]_MGIOL ( 
    .IOLDO(\stim_dac0_val_c[3] ), 
    .OPOS(\u_cg_fsm.r_dac_amp_0[3]\000/BUF0\000/BUF0\000/BUF0 ), 
    .CE(\u_cg_fsm.c_cathod_phase_en_0_sqmuxa ));
  stim_dac0_val_2_ \stim_dac0_val[2]_I ( .IOLDO(\stim_dac0_val_c[2] ), 
    .stimdac0val2(stim_dac0_val[2]));
  stim_dac0_val_2__MGIOL \stim_dac0_val[2]_MGIOL ( 
    .IOLDO(\stim_dac0_val_c[2] ), 
    .OPOS(\u_cg_fsm.r_dac_amp_0[2]\000/BUF0\000/BUF0\000/BUF0 ), 
    .CE(\u_cg_fsm.c_cathod_phase_en_0_sqmuxa ));
  stim_dac0_val_1_ \stim_dac0_val[1]_I ( .IOLDO(\stim_dac0_val_c[1] ), 
    .stimdac0val1(stim_dac0_val[1]));
  stim_dac0_val_1__MGIOL \stim_dac0_val[1]_MGIOL ( 
    .IOLDO(\stim_dac0_val_c[1] ), 
    .OPOS(\u_cg_fsm.r_dac_amp_0[1]\000/BUF0\000/BUF0\000/BUF0 ), 
    .CE(\u_cg_fsm.c_cathod_phase_en_0_sqmuxa ));
  stim_dac0_val_0_ \stim_dac0_val[0]_I ( .IOLDO(\stim_dac0_val_c[0] ), 
    .stimdac0val0(stim_dac0_val[0]));
  stim_dac0_val_0__MGIOL \stim_dac0_val[0]_MGIOL ( 
    .IOLDO(\stim_dac0_val_c[0] ), 
    .OPOS(\u_cg_fsm.r_dac_amp_0[0]\000/BUF0\000/BUF0\000/BUF0 ), 
    .CE(\u_cg_fsm.c_cathod_phase_en_0_sqmuxa ));
  stim_ca_7_ \stim_ca[7]_I ( .IOLDO(\stim_ca_c[7] ), .stimca7(stim_ca[7]));
  stim_ca_7__MGIOL \stim_ca[7]_MGIOL ( .IOLDO(\stim_ca_c[7] ), 
    .OPOS(\u_cg_fsm.c_stim_ca[7]\000/BUF0\000/BUF0\000/BUF0 ));
  stim_ca_6_ \stim_ca[6]_I ( .IOLDO(\stim_ca_c[6] ), .stimca6(stim_ca[6]));
  stim_ca_6__MGIOL \stim_ca[6]_MGIOL ( .IOLDO(\stim_ca_c[6] ), 
    .OPOS(\u_cg_fsm.c_stim_ca[6]\000/BUF0\000/BUF0\000/BUF0 ));
  stim_ca_5_ \stim_ca[5]_I ( .IOLDO(\stim_ca_c[5] ), .stimca5(stim_ca[5]));
  stim_ca_5__MGIOL \stim_ca[5]_MGIOL ( .IOLDO(\stim_ca_c[5] ), 
    .OPOS(\u_cg_fsm.c_stim_ca[5]\000/BUF0\000/BUF0\000/BUF0 ));
  stim_ca_4_ \stim_ca[4]_I ( .IOLDO(\stim_ca_c[4] ), .stimca4(stim_ca[4]));
  stim_ca_4__MGIOL \stim_ca[4]_MGIOL ( .IOLDO(\stim_ca_c[4] ), 
    .OPOS(\u_cg_fsm.c_stim_ca[4]\000/BUF0\000/BUF0\000/BUF0 ));
  stim_ca_3_ \stim_ca[3]_I ( .IOLDO(\stim_ca_c[3] ), .stimca3(stim_ca[3]));
  stim_ca_3__MGIOL \stim_ca[3]_MGIOL ( .IOLDO(\stim_ca_c[3] ), 
    .OPOS(\u_cg_fsm.c_stim_ca[3]\000/BUF0\000/BUF0\000/BUF0 ));
  stim_ca_2_ \stim_ca[2]_I ( .IOLDO(\stim_ca_c[2] ), .stimca2(stim_ca[2]));
  stim_ca_2__MGIOL \stim_ca[2]_MGIOL ( .IOLDO(\stim_ca_c[2] ), 
    .OPOS(\u_cg_fsm.c_stim_ca[2]\000/BUF0\000/BUF0\000/BUF0 ));
  stim_ca_1_ \stim_ca[1]_I ( .IOLDO(\stim_ca_c[1] ), .stimca1(stim_ca[1]));
  stim_ca_1__MGIOL \stim_ca[1]_MGIOL ( .IOLDO(\stim_ca_c[1] ), 
    .OPOS(\u_cg_fsm.c_stim_ca[1]\000/BUF0\000/BUF0\000/BUF0 ));
  stim_ca_0_ \stim_ca[0]_I ( .IOLDO(\stim_ca_c[0] ), .stimca0(stim_ca[0]));
  stim_ca_0__MGIOL \stim_ca[0]_MGIOL ( .IOLDO(\stim_ca_c[0] ), 
    .OPOS(\u_cg_fsm.c_stim_ca[0]\000/BUF0\000/BUF0\000/BUF0 ));
  stim_an_7_ \stim_an[7]_I ( .IOLDO(\stim_an_c[7] ), .stiman7(stim_an[7]));
  stim_an_7__MGIOL \stim_an[7]_MGIOL ( .IOLDO(\stim_an_c[7] ), 
    .OPOS(\u_cg_fsm.c_stim_an[7]\000/BUF0\000/BUF0\000/BUF0 ));
  stim_an_6_ \stim_an[6]_I ( .IOLDO(\stim_an_c[6] ), .stiman6(stim_an[6]));
  stim_an_6__MGIOL \stim_an[6]_MGIOL ( .IOLDO(\stim_an_c[6] ), 
    .OPOS(\u_cg_fsm.c_stim_an[6]\000/BUF0\000/BUF0\000/BUF0 ));
  stim_an_5_ \stim_an[5]_I ( .IOLDO(\stim_an_c[5] ), .stiman5(stim_an[5]));
  stim_an_5__MGIOL \stim_an[5]_MGIOL ( .IOLDO(\stim_an_c[5] ), 
    .OPOS(\u_cg_fsm.c_stim_an[5]\000/BUF0\000/BUF0\000/BUF0 ));
  stim_an_4_ \stim_an[4]_I ( .IOLDO(\stim_an_c[4] ), .stiman4(stim_an[4]));
  stim_an_4__MGIOL \stim_an[4]_MGIOL ( .IOLDO(\stim_an_c[4] ), 
    .OPOS(\u_cg_fsm.c_stim_an[4]\000/BUF0\000/BUF0\000/BUF0 ));
  stim_an_3_ \stim_an[3]_I ( .IOLDO(\stim_an_c[3] ), .stiman3(stim_an[3]));
  stim_an_3__MGIOL \stim_an[3]_MGIOL ( .IOLDO(\stim_an_c[3] ), 
    .OPOS(\u_cg_fsm.c_stim_an[3]\000/BUF0\000/BUF0\000/BUF0 ));
  stim_an_2_ \stim_an[2]_I ( .IOLDO(\stim_an_c[2] ), .stiman2(stim_an[2]));
  stim_an_2__MGIOL \stim_an[2]_MGIOL ( .IOLDO(\stim_an_c[2] ), 
    .OPOS(\u_cg_fsm.c_stim_an[2]\000/BUF0\000/BUF0\000/BUF0 ));
  stim_an_1_ \stim_an[1]_I ( .IOLDO(\stim_an_c[1] ), .stiman1(stim_an[1]));
  stim_an_1__MGIOL \stim_an[1]_MGIOL ( .IOLDO(\stim_an_c[1] ), 
    .OPOS(\u_cg_fsm.c_stim_an[1]\000/BUF0\000/BUF0\000/BUF0 ));
  stim_an_0_ \stim_an[0]_I ( .IOLDO(\stim_an_c[0] ), .stiman0(stim_an[0]));
  stim_an_0__MGIOL \stim_an[0]_MGIOL ( .IOLDO(\stim_an_c[0] ), 
    .OPOS(\u_cg_fsm.c_stim_an[0]\000/BUF0\000/BUF0\000/BUF0 ));
  stim_comp_en_n stim_comp_en_n_I( .IOLDO(stim_comp_en_n_c), 
    .stim_comp_en_n(stim_comp_en_n));
  stim_comp_en_n_MGIOL stim_comp_en_n_MGIOL( .IOLDO(stim_comp_en_n_c), 
    .OPOS(\u_cg_fsm.c_stim_comp_en_n\000/BUF0\000/BUF0\000/BUF0 ));
  data_out data_out_I( .PADDO(GND), .data_out(data_out));
  clk_out clk_out_I( .PADDO(w_div4_clk), .clk_out(clk_out));
  lv_oe_n lv_oe_n_I( .PADDO(GND), .lv_oe_n(lv_oe_n));
  lv_dir lv_dir_I( .PADDO(VCC), .lv_dir(lv_dir));
  led_out_15_ \led_out[15]_I ( .PADDO(\led_out_c[15] ), .ledout15(led_out[15]));
  led_out_14_ \led_out[14]_I ( .PADDO(GND), .ledout14(led_out[14]));
  led_out_13_ \led_out[13]_I ( .PADDO(GND), .ledout13(led_out[13]));
  led_out_12_ \led_out[12]_I ( .PADDO(GND), .ledout12(led_out[12]));
  led_out_11_ \led_out[11]_I ( .PADDO(GND), .ledout11(led_out[11]));
  led_out_10_ \led_out[10]_I ( .PADDO(GND), .ledout10(led_out[10]));
  led_out_9_ \led_out[9]_I ( .PADDO(GND), .ledout9(led_out[9]));
  led_out_8_ \led_out[8]_I ( .PADDO(GND), .ledout8(led_out[8]));
  led_out_7_ \led_out[7]_I ( .PADDO(\led_out_c[7] ), .ledout7(led_out[7]));
  led_out_6_ \led_out[6]_I ( .PADDO(\led_out_c[6] ), .ledout6(led_out[6]));
  led_out_5_ \led_out[5]_I ( .PADDO(\led_out_c[5] ), .ledout5(led_out[5]));
  led_out_4_ \led_out[4]_I ( .PADDO(\led_out_c[4] ), .ledout4(led_out[4]));
  led_out_3_ \led_out[3]_I ( .PADDO(\led_out_c[3] ), .ledout3(led_out[3]));
  led_out_2_ \led_out[2]_I ( .PADDO(\led_out_c[2] ), .ledout2(led_out[2]));
  led_out_1_ \led_out[1]_I ( .PADDO(\led_out_c[1] ), .ledout1(led_out[1]));
  polarity_2_ \polarity[2]_I ( .PADDI(\polarity_c[2] ), 
    .polarity2(polarity[2]));
  sw2_b sw2_b_I( .PADDI(sw2_b_c), .sw2_b(sw2_b));
  sw2_a sw2_a_I( .PADDI(sw2_az), .sw2_a(sw2_a));
  sw1_b sw1_b_I( .PADDI(sw1_b_c), .sw1_b(sw1_b));
  sw1_a sw1_a_I( .PADDI(sw1_az), .sw1_a(sw1_a));
  GSR_INST GSR_INST( .GSRNET(i_rst_n_c));
  VHI VHI_INST( .Z(VCCI));
  PUR PUR_INST( .PUR(VCCI));
endmodule

module SLICE_0 ( input B1, A1, B0, CE, output Q0, Q1, FCO );
  wire   GNDI, VCCI;

  vmuxregsre \r_channel_1[7] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \r_channel_1[6] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q0));
  ccu2 sw2_counter_lcry_0( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vmuxregsre ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module gnd ( output PWR0 );

  VLO INST1( .Z(PWR0));
endmodule

module vcc ( output PWR1 );

  VHI INST1( .Z(PWR1));
endmodule

module ccu2 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h300A;
  defparam inst1.INIT1 = 16'h300A;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module u_cg_fsm_SLICE_1 ( input D0, C0, B0, A0, FCI, output F1 );
  wire   GNDI;

  ccu20001 \u_cg_fsm/w_rate_tmout_0_I_21_0 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(F1), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F1) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20001 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h9009;
  defparam inst1.INIT1 = 16'h300F;
  defparam inst1.INJECT1_0 = "YES";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module u_cg_fsm_SLICE_2 ( input D1, C1, B1, A1, D0, C0, B0, A0, FCI, output 
    FCO );

  ccu20002 \u_cg_fsm/w_rate_tmout_0_I_9_0 ( .A0(A0), .B0(B0), .C0(C0), .D0(D0), 
    .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(FCI), .S0(), .S1(), .CO1(FCO));

  specify
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (D0 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20002 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h9009;
  defparam inst1.INIT1 = 16'h9009;
  defparam inst1.INJECT1_0 = "YES";
  defparam inst1.INJECT1_1 = "YES";
endmodule

module u_cg_fsm_SLICE_3 ( input D1, C1, B1, A1, output FCO );
  wire   GNDI;

  ccu20003 \u_cg_fsm/w_rate_tmout_0_I_1_0 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(GNDI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20003 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h300A;
  defparam inst1.INIT1 = 16'h9009;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "YES";
endmodule

module u_cg_fsm_SLICE_4 ( input D0, C0, B0, A0, FCI, output Q0, F1, Q1 );
  wire   GNDI, VCCI;

  vmuxregsre \u_cg_fsm/r_interval_value[0] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(GNDI), .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/r_disabled_dac_sel_found_d ( .D0(GNDI), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(GNDI), .LSR(GNDI), .Q(Q0));
  ccu20001 \u_cg_fsm/w_duration_tmout_0_I_21_0 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(F1), .CO1());

  specify
    (D0 => F1) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
  endspecify

endmodule

module u_cg_fsm_SLICE_5 ( input D1, C1, B1, A1, D0, C0, B0, A0, FCI, output Q0, 
    Q1, FCO );
  wire   GNDI, VCCI;

  vmuxregsre \u_cg_fsm/r_state[2] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(VCCI), 
    .CK(GNDI), .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/r_state[1] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(VCCI), 
    .CK(GNDI), .LSR(GNDI), .Q(Q0));
  ccu20002 \u_cg_fsm/w_duration_tmout_0_I_9_0 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(D0), .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (D0 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_6 ( input D1, C1, B1, A1, output Q0, Q1, FCO );
  wire   GNDI, VCCI;

  vmuxregsre \r_mode[2] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(VCCI), 
    .CK(GNDI), .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \r_mode[1] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(VCCI), 
    .CK(GNDI), .LSR(GNDI), .Q(Q0));
  ccu20003 \u_cg_fsm/w_duration_tmout_0_I_1_0 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(GNDI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module u_cg_fsm_SLICE_7 ( input B0, A0, FCI, output Q0, F1 );
  wire   GNDI, VCCI;

  vmuxregsre \u_cg_fsm/r_sync_cathod_phase[2] ( .D0(GNDI), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(GNDI), .LSR(GNDI), .Q(Q0));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20004 \u_cg_fsm/w_interval_tmout_0_I_21_0 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(F1), .CO1());

  specify
    (B0 => F1) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20004 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5001;
  defparam inst1.INIT1 = 16'h300F;
  defparam inst1.INJECT1_0 = "YES";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module u_cg_fsm_SLICE_8 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20005 \u_cg_fsm/w_interval_tmout_0_I_9_0 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20005 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5001;
  defparam inst1.INIT1 = 16'h5001;
  defparam inst1.INJECT1_0 = "YES";
  defparam inst1.INJECT1_1 = "YES";
endmodule

module u_cg_fsm_SLICE_9 ( input C1, B1, A1, output Q0, Q1, FCO );
  wire   GNDI, VCCI;

  vmuxregsre \u_cg_fsm/r_sync_cathod_phase[1] ( .D0(GNDI), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(GNDI), .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/r_state[3] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(VCCI), 
    .CK(GNDI), .LSR(GNDI), .Q(Q0));
  ccu20006 \u_cg_fsm/w_interval_tmout_0_I_1_0 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(), .CO1(FCO));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20006 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h300A;
  defparam inst1.INIT1 = 16'h5041;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "YES";
endmodule

module SLICE_10 ( input B0, A0, CE, FCI, output Q0, F1, Q1 );
  wire   GNDI, VCCI;

  vmuxregsre \r_rate[3] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), .CK(GNDI), 
    .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \r_rate[2] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), .CK(GNDI), 
    .LSR(GNDI), .Q(Q0));
  ccu20007 \u_cg_fsm/r_duration_cnt15_cry_7_0 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(F1), .CO1());

  specify
    (B0 => F1) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20007 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5009;
  defparam inst1.INIT1 = 16'h300A;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_11 ( input B1, A1, B0, A0, CE, FCI, output Q0, Q1, FCO );
  wire   GNDI, VCCI;

  vmuxregsre0008 \r_rate[1] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \r_rate[0] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), .CK(GNDI), 
    .LSR(GNDI), .Q(Q0));
  ccu20009 \u_cg_fsm/r_duration_cnt15_cry_5_0 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vmuxregsre0008 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3BX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module ccu20009 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5009;
  defparam inst1.INIT1 = 16'h5009;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_12 ( input B1, A1, B0, A0, CE, FCI, output Q0, Q1, FCO );
  wire   GNDI, VCCI;

  vmuxregsre \r_duration[7] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \r_duration[6] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q0));
  ccu20009 \u_cg_fsm/r_duration_cnt15_cry_3_0 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_13 ( input B1, A1, B0, A0, CE, FCI, output Q0, Q1, FCO );
  wire   GNDI, VCCI;

  vmuxregsre \r_duration[5] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \r_duration[4] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q0));
  ccu20009 \u_cg_fsm/r_duration_cnt15_cry_1_0 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_14 ( input B1, A1, CE, output Q0, Q1, FCO );
  wire   GNDI, VCCI;

  vmuxregsre \r_duration[3] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0008 \r_duration[2] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q0));
  ccu20010 \u_cg_fsm/r_duration_cnt15_cry_0_0 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20010 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h300A;
  defparam inst1.INIT1 = 16'h5009;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module u_cg_fsm_SLICE_15 ( input B0, A0, DI0, CE, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  vmuxregsre \u_cg_fsm/r_duration_cnt[7] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20011 \u_cg_fsm/r_duration_cnt_s_0[7] ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20011 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5008;
  defparam inst1.INIT1 = 16'h300A;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module u_cg_fsm_SLICE_16 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \u_cg_fsm/r_duration_cnt[6] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \u_cg_fsm/r_duration_cnt[5] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20012 \u_cg_fsm/r_duration_cnt_cry_0[5] ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20012 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF008;
  defparam inst1.INIT1 = 16'hF008;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module u_cg_fsm_SLICE_17 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \u_cg_fsm/r_duration_cnt[4] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \u_cg_fsm/r_duration_cnt[3] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20012 \u_cg_fsm/r_duration_cnt_cry_0[3] ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_cg_fsm_SLICE_18 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \u_cg_fsm/r_duration_cnt[2] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \u_cg_fsm/r_duration_cnt[1] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20012 \u_cg_fsm/r_duration_cnt_cry_0[1] ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_cg_fsm_SLICE_19 ( input B1, A1, B0, DI1, CE, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly;

  vmuxregsre \u_cg_fsm/r_duration_cnt[0] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20013 \u_cg_fsm/r_duration_cnt_cry_0[0] ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20013 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h300A;
  defparam inst1.INIT1 = 16'hF008;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module u_cg_fsm_SLICE_20 ( input B0, A0, DI0, CE, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  vmuxregsre \u_cg_fsm/r_rate_cnt[7] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20011 \u_cg_fsm/r_rate_cnt_s_0[7] ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_cg_fsm_SLICE_21 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \u_cg_fsm/r_rate_cnt[6] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \u_cg_fsm/r_rate_cnt[5] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20012 \u_cg_fsm/r_rate_cnt_cry_0[5] ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_cg_fsm_SLICE_22 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \u_cg_fsm/r_rate_cnt[4] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \u_cg_fsm/r_rate_cnt[3] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20012 \u_cg_fsm/r_rate_cnt_cry_0[3] ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_cg_fsm_SLICE_23 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \u_cg_fsm/r_rate_cnt[2] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \u_cg_fsm/r_rate_cnt[1] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20012 \u_cg_fsm/r_rate_cnt_cry_0[1] ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_cg_fsm_SLICE_24 ( input B1, A1, B0, DI1, CE, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly;

  vmuxregsre \u_cg_fsm/r_rate_cnt[0] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20013 \u_cg_fsm/r_rate_cnt_cry_0[0] ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_25 ( input B0, A0, CE, FCI, output Q0, F1, Q1 );
  wire   GNDI, VCCI;

  vmuxregsre \r_channel_0[7] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \r_channel_0[6] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q0));
  ccu20007 sw1_counter33_cry_7_0( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(F1), 
    .CO1());

  specify
    (B0 => F1) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_26 ( input B1, A1, B0, A0, CE, FCI, output Q0, Q1, FCO );
  wire   GNDI, VCCI;

  vmuxregsre \r_channel_0[5] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \r_channel_0[4] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q0));
  ccu20009 sw1_counter33_cry_5_0( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_27 ( input B1, A1, B0, A0, CE, FCI, output Q0, Q1, FCO );
  wire   GNDI, VCCI;

  vmuxregsre \r_channel_0[3] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \r_channel_0[2] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q0));
  ccu20009 sw1_counter33_cry_3_0( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_28 ( input B1, A1, B0, A0, CE, FCI, output Q0, Q1, FCO );
  wire   GNDI, VCCI;

  vmuxregsre0008 \r_channel_0[1] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \r_channel_0[0] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q0));
  ccu20009 sw1_counter33_cry_1_0( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_29 ( input C1, B1, A1, M0, CE, CLK, output Q0, FCO );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre r_ack_mode_transition( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20014 sw1_counter33_cry_0_0( .A0(GNDI), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(GNDI), .S0(), .S1(), .CO1(FCO));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20014 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h300A;
  defparam inst1.INIT1 = 16'h5056;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_30 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CLK, FCI, output F0, 
    Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \sw1_counter[7] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \sw1_counter[6] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20015 \sw1_counter_cry_0[6] ( .A0(A0), .B0(B0), .C0(C0), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1());

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20015 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hA059;
  defparam inst1.INIT1 = 16'h5059;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_31 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \sw1_counter[5] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \sw1_counter[4] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20016 \sw1_counter_cry_0[4] ( .A0(A0), .B0(B0), .C0(C0), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20016 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hA059;
  defparam inst1.INIT1 = 16'hA059;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_32 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \sw1_counter[3] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \sw1_counter[2] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20016 \sw1_counter_cry_0[2] ( .A0(A0), .B0(B0), .C0(C0), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_33 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \sw1_counter[1] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \sw1_counter[0] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20016 \sw1_counter_cry_0[0] ( .A0(A0), .B0(B0), .C0(C0), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_34 ( input C1, B1, A1, B0, CE, output Q0, Q1, FCO );
  wire   GNDI, VCCI;

  vmuxregsre \r_channel_1[1] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0008 \r_channel_1[0] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q0));
  ccu20017 sw1_counter_lcry_0( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(GNDI), .S0(), .S1(), .CO1(FCO));

  specify
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20017 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h300A;
  defparam inst1.INIT1 = 16'h5003;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_35 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CLK, FCI, output F0, 
    Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \sw2_counter[7] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \sw2_counter[6] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20018 \sw2_counter_cry_0[6] ( .A0(A0), .B0(B0), .C0(C0), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1());

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20018 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h10BE;
  defparam inst1.INIT1 = 16'h50BE;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_36 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \sw2_counter[5] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \sw2_counter[4] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20019 \sw2_counter_cry_0[4] ( .A0(A0), .B0(B0), .C0(C0), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20019 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h10BE;
  defparam inst1.INIT1 = 16'h10BE;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_37 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \sw2_counter[3] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \sw2_counter[2] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20019 \sw2_counter_cry_0[2] ( .A0(A0), .B0(B0), .C0(C0), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_38 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  vmuxregsre \sw2_counter[1] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \sw2_counter[0] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20019 \sw2_counter_cry_0[0] ( .A0(A0), .B0(B0), .C0(C0), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_39 ( input D1, C1, B1, A1, B0, A0, DI0, CE, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut4 \u_cg_fsm/u_sync_anode_phase_en/sw1_counter29lto7_5 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40020 \u_cg_fsm/u_sync_anode_phase_en/display_item_num_3[0] ( .A(A0), 
    .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \display_item_num[0] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40020 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1111) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_40 ( input D1, C1, B1, A1, C0, B0, A0, DI1, DI0, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40021 \u_cg_fsm/u_sync_anode_phase_en/display_item_num_3[2] ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40022 \u_cg_fsm/u_sync_anode_phase_en/display_item_num_3[1] ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \display_item_num[2] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \display_item_num[1] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40021 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1444) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40022 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0606) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module u_cg_fsm_SLICE_101 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CE, CLK, 
    output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40023 \u_cg_fsm/r_rate_phase11_4 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40024 \u_cg_fsm/r_rate_phase_RNO ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \u_cg_fsm/r_rate_phase ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40023 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40024 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_114 ( input M1, M0, CE, CLK, output F0, Q0, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40025 \u_cg_fsm.c_stim_an[6]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( .A(GNDI), 
    .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \u_cg_fsm/r_sync_rate[3] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/r_sync_rate[2] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40025 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_115 ( input M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40025 \u_cg_fsm.c_stim_an[5]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( .A(GNDI), 
    .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40025 \u_cg_fsm.c_stim_an[4]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( .A(GNDI), 
    .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre \u_cg_fsm/r_sync_rate[5] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/r_sync_rate[4] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_116 ( input M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40025 \u_cg_fsm.c_stim_an[3]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( .A(GNDI), 
    .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40025 \u_cg_fsm.c_stim_an[2]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( .A(GNDI), 
    .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre \u_cg_fsm/r_sync_rate[7] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/r_sync_rate[6] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_cg_fsm_SLICE_117 ( input B1, A1, B0, A0, DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40026 \u_cg_fsm/u_sync_search_disabled_channel_phase_end_p/r_slave_en8 ( 
    .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40027 \u_cg_fsm/u_sync_search_disabled_channel_phase_end_p/o_sen ( .A(A0), 
    .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre \u_cg_fsm/r_sync_search_disabled_channel_phase_end_p_d ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40026 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40027 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2222) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module u_cg_fsm_SLICE_118 ( input B1, A1, B0, A0, DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40026 \u_cg_fsm/u_sync_trigger/r_slave_en8 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40027 \u_cg_fsm/u_sync_trigger/o_sen ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre \u_cg_fsm/r_sync_trigger_d ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_119 ( input CE, output F0, Q0, F1 );
  wire   GNDI, VCCI;

  lut40025 \u_cg_fsm.c_stim_an[1]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( .A(GNDI), 
    .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40025 \u_cg_fsm.c_stim_an[0]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( .A(GNDI), 
    .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre \u_cg_fsm/u_sync_anode_phase_en/r_master_en ( .D0(GNDI), 
    .D1(VCCI), .SD(GNDI), .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
  endspecify

endmodule

module SLICE_120 ( input M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40025 \u_cg_fsm.r_channel_0[2]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( .A(GNDI), 
    .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40025 \u_cg_fsm.r_channel_0[1]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( .A(GNDI), 
    .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre \u_cg_fsm/u_sync_anode_phase_en/r_slave_en[1] ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/u_sync_anode_phase_en/r_slave_en[0] ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_121 ( input CE, output F0, Q0, F1 );
  wire   GNDI, VCCI;

  lut40025 \u_cg_fsm.r_channel_0[0]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( .A(GNDI), 
    .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40025 \u_cg_fsm.r_stim_bcg1_sel_2[2]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( 
    .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre \u_cg_fsm/u_sync_cathod_phase_en/r_master_en ( .D0(GNDI), 
    .D1(VCCI), .SD(GNDI), .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
  endspecify

endmodule

module SLICE_122 ( input M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40025 \u_cg_fsm.r_stim_bcg1_sel_2[1]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( 
    .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40025 \u_cg_fsm.r_stim_bcg1_sel_2[0]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( 
    .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre \u_cg_fsm/u_sync_cathod_phase_en/r_slave_en[1] ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/u_sync_cathod_phase_en/r_slave_en[0] ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_cg_fsm_u_sync_fsm_trigger_SLICE_123 ( input C1, B1, A1, B0, A0, DI0, 
    CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40028 \u_cg_fsm/u_sync_fsm_trigger/r_master_en_RNO_0 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40029 \u_cg_fsm/u_sync_fsm_trigger/r_master_en_RNO ( .A(A0), .B(B0), 
    .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre \u_cg_fsm/u_sync_fsm_trigger/r_master_en ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40028 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEAEA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40029 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_124 ( input CE, output F0, Q0, F1 );
  wire   GNDI, VCCI;

  lut40025 \u_cg_fsm.c_stim_ca[7]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( .A(GNDI), 
    .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40025 \u_cg_fsm.c_stim_ca[6]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( .A(GNDI), 
    .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre \u_cg_fsm/u_sync_search_disabled_channel_phase_end_p/r_master_en 
    ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
  endspecify

endmodule

module SLICE_125 ( input M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40025 \u_cg_fsm.c_stim_ca[5]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( .A(GNDI), 
    .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40025 \u_cg_fsm.c_stim_ca[4]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( .A(GNDI), 
    .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre 
    \u_cg_fsm/u_sync_search_disabled_channel_phase_end_p/r_slave_en[1] ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre 
    \u_cg_fsm/u_sync_search_disabled_channel_phase_end_p/r_slave_en[0] ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_126 ( input M0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40025 \u_cg_fsm.c_stim_ca[3]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( .A(GNDI), 
    .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40025 \u_cg_fsm.c_stim_ca[2]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( .A(GNDI), 
    .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre 
    \u_cg_fsm/u_sync_search_disabled_channel_phase_end_p/r_slave_en[2] ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_127 ( input CE, output F0, Q0, F1 );
  wire   GNDI, VCCI;

  lut40025 \u_cg_fsm.c_stim_ca[1]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( .A(GNDI), 
    .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40025 \u_cg_fsm.c_stim_ca[0]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( .A(GNDI), 
    .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre \u_cg_fsm/u_sync_trigger/r_master_en ( .D0(GNDI), .D1(VCCI), 
    .SD(GNDI), .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
  endspecify

endmodule

module SLICE_129 ( input M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40025 \u_cg_fsm.c_stim_comp_en_n\000/BUF0\000/BUF0\000/BUF0/BUF0 ( 
    .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40025 \u_cg_fsm.r_dac_amp_0[7]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( .A(GNDI), 
    .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre \u_cg_fsm/u_sync_trigger/r_slave_en[0] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/u_sync_trigger/r_slave_en[1] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_130 ( input M0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40025 \u_cg_fsm.r_dac_amp_0[6]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( .A(GNDI), 
    .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40025 \u_cg_fsm.r_dac_amp_0[5]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( .A(GNDI), 
    .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre \u_cg_fsm/u_sync_trigger/r_slave_en[2] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_131 ( output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI;

  lut40025 \u_cg_fsm.r_dac_amp_0[4]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( .A(GNDI), 
    .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40025 \u_cg_fsm.r_dac_amp_0[3]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( .A(GNDI), 
    .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre mode_disp_en( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(VCCI), 
    .CK(GNDI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/r_state[4] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(VCCI), 
    .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
  endspecify

endmodule

module SLICE_132 ( input CE, output F0, Q0, F1 );
  wire   GNDI, VCCI;

  lut40025 \u_cg_fsm.r_dac_amp_0[2]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( .A(GNDI), 
    .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40025 \u_cg_fsm.r_dac_amp_0[1]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( .A(GNDI), 
    .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre \u_cg_fsm/r_anode_phase ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
  endspecify

endmodule

module SLICE_133 ( input CE, output F0, Q0, F1 );
  wire   GNDI, VCCI;

  lut40025 \u_cg_fsm.r_dac_amp_0[0]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( .A(GNDI), 
    .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40025 \u_cg_fsm.r_stim_dac1_val_2[7]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( 
    .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre \u_cg_fsm/r_interval_phase ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
  endspecify

endmodule

module SLICE_134 ( input CE, output F0, Q0, F1 );
  wire   GNDI, VCCI;

  lut40025 \u_cg_fsm.r_stim_dac1_val_2[6]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( 
    .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40025 \u_cg_fsm.r_stim_dac1_val_2[5]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( 
    .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre \u_cg_fsm/r_cathod_phase ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
  endspecify

endmodule

module SLICE_135 ( input M0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40025 \u_cg_fsm.r_stim_dac1_val_2[4]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( 
    .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40025 \u_cg_fsm.r_stim_dac1_val_2[3]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( 
    .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre \u_cg_fsm/u_sync_cathod_phase_en/r_slave_en[2] ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_136 ( input M0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40025 \u_cg_fsm.r_stim_dac1_val_2[2]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( 
    .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40025 \u_cg_fsm.r_stim_dac1_val_2[1]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( 
    .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre \u_cg_fsm/u_sync_anode_phase_en/r_slave_en[2] ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_137 ( input CE, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI;

  lut40025 \u_cg_fsm.r_stim_dac1_val_2[0]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( 
    .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40025 \u_cg_fsm.c_stim_an[7]\000/BUF0\000/BUF0\000/BUF0/BUF0 ( .A(GNDI), 
    .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre \u_cg_fsm/u_sync_fsm_trigger/r_slave_en[1] ( .D0(GNDI), .D1(VCCI), 
    .SD(GNDI), .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/u_sync_fsm_trigger/r_slave_en[2] ( .D0(GNDI), .D1(VCCI), 
    .SD(GNDI), .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
  endspecify

endmodule

module SLICE_138 ( input CE, output F0, Q0, F1 );
  wire   GNDI, VCCI;

  lut40025 GND( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40030 VCC( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre \u_trigger_en/r_slave_en[1] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
  endspecify

endmodule

module lut40030 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_139 ( input B1, A1, B0, A0, CE, output F0, Q0, F1 );
  wire   GNDI, VCCI;

  lut40026 \u_trigger_en/r_slave_en8 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 \u_cg_fsm/r_rate_phase11_3 ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre \u_trigger_en/r_slave_en[2] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_140 ( input B1, A1, D0, C0, B0, A0, CE, output F0, Q0, F1 );
  wire   GNDI, VCCI;

  lut40026 \u_cg_fsm/c_stim_ca_0_0_o2_1[0] ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut4 \u_cg_fsm/c_map_cathod_channel_121_6_i_o3 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \u_trigger_en/r_master_en ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_141 ( input D1, C1, B1, A1, B0, A0, output F0, Q0, F1 );
  wire   GNDI, VCCI;

  lut40031 \u_cg_fsm/u_sync_anode_phase_en/led_out_1[3] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40026 \u_cg_fsm/u_sync_fsm_trigger/r_slave_en8 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \u_div4_clk/r_gen_clk ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(GNDI), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40031 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00AC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module u_cg_fsm_led_out_1_5_1__SLICE_142 ( input C1, B1, A1, C0, B0, A0, M0, 
    output OFX0 );
  wire   GNDI, 
         \u_cg_fsm/led_out_1_5[1]/SLICE_142/u_cg_fsm/led_out_1_5[1]/SLICE_142_K1_H1 
         , \u_cg_fsm/led_out_1_5[1]/SLICE_142/u_cg_fsm/led_out_1_5[1]/GATE_H0 ;

  lut40032 \u_cg_fsm/led_out_1_5[1]/SLICE_142_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\u_cg_fsm/led_out_1_5[1]/SLICE_142/u_cg_fsm/led_out_1_5[1]/SLICE_142_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40032 \u_cg_fsm/led_out_1_5[1]/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\u_cg_fsm/led_out_1_5[1]/SLICE_142/u_cg_fsm/led_out_1_5[1]/GATE_H0 ));
  selmux2 \u_cg_fsm/led_out_1_5[1]/SLICE_142_K0K1MUX ( 
    .D0(\u_cg_fsm/led_out_1_5[1]/SLICE_142/u_cg_fsm/led_out_1_5[1]/GATE_H0 ), 
    .D1(\u_cg_fsm/led_out_1_5[1]/SLICE_142/u_cg_fsm/led_out_1_5[1]/SLICE_142_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40032 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD8D8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module selmux2 ( input D0, D1, SD, output Z );

  MUX21 INST1( .D0(D0), .D1(D1), .SD(SD), .Z(Z));
endmodule

module u_cg_fsm_u_sync_anode_phase_en_led_out_1_6_7__SLICE_143 ( input C1, B1, 
    A1, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[7]/SLICE_143/u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[7]/SLICE_143_K1_H1 
         , 
         \u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[7]/SLICE_143/u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[7]/GATE_H0 
         ;

  lut40033 \u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[7]/SLICE_143_K1 ( 
    .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[7]/SLICE_143/u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[7]/SLICE_143_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40034 \u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[7]/GATE ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), 
    .Z(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[7]/SLICE_143/u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[7]/GATE_H0 )
    );
  selmux2 \u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[7]/SLICE_143_K0K1MUX ( 
    .D0(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[7]/SLICE_143/u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[7]/GATE_H0 )
    , 
    .D1(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[7]/SLICE_143/u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[7]/SLICE_143_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40033 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE4E4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40034 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCACA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module u_cg_fsm_u_sync_anode_phase_en_led_out_1_0__SLICE_144 ( input C1, B1, 
    A1, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \u_cg_fsm/u_sync_anode_phase_en/led_out_1[0]/SLICE_144/u_cg_fsm/u_sync_anode_phase_en/led_out_1[0]/SLICE_144_K1_H1 
         , 
         \u_cg_fsm/u_sync_anode_phase_en/led_out_1[0]/SLICE_144/u_cg_fsm/u_sync_anode_phase_en/led_out_1[0]/GATE_H0 
         ;

  lut40033 \u_cg_fsm/u_sync_anode_phase_en/led_out_1[0]/SLICE_144_K1 ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), 
    .Z(\u_cg_fsm/u_sync_anode_phase_en/led_out_1[0]/SLICE_144/u_cg_fsm/u_sync_anode_phase_en/led_out_1[0]/SLICE_144_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40035 \u_cg_fsm/u_sync_anode_phase_en/led_out_1[0]/GATE ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), 
    .Z(\u_cg_fsm/u_sync_anode_phase_en/led_out_1[0]/SLICE_144/u_cg_fsm/u_sync_anode_phase_en/led_out_1[0]/GATE_H0 )
    );
  selmux2 \u_cg_fsm/u_sync_anode_phase_en/led_out_1[0]/SLICE_144_K0K1MUX ( 
    .D0(\u_cg_fsm/u_sync_anode_phase_en/led_out_1[0]/SLICE_144/u_cg_fsm/u_sync_anode_phase_en/led_out_1[0]/GATE_H0 )
    , 
    .D1(\u_cg_fsm/u_sync_anode_phase_en/led_out_1[0]/SLICE_144/u_cg_fsm/u_sync_anode_phase_en/led_out_1[0]/SLICE_144_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40035 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hACAC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module u_cg_fsm_u_sync_anode_phase_en_led_out_1_6_5__SLICE_145 ( input C1, B1, 
    A1, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[5]/SLICE_145/u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[5]/SLICE_145_K1_H1 
         , 
         \u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[5]/SLICE_145/u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[5]/GATE_H0 
         ;

  lut40033 \u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[5]/SLICE_145_K1 ( 
    .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[5]/SLICE_145/u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[5]/SLICE_145_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40034 \u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[5]/GATE ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), 
    .Z(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[5]/SLICE_145/u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[5]/GATE_H0 )
    );
  selmux2 \u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[5]/SLICE_145_K0K1MUX ( 
    .D0(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[5]/SLICE_145/u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[5]/GATE_H0 )
    , 
    .D1(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[5]/SLICE_145/u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[5]/SLICE_145_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module u_cg_fsm_u_sync_anode_phase_en_led_out_1_6_4__SLICE_146 ( input C1, B1, 
    A1, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[4]/SLICE_146/u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[4]/SLICE_146_K1_H1 
         , 
         \u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[4]/SLICE_146/u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[4]/GATE_H0 
         ;

  lut40033 \u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[4]/SLICE_146_K1 ( 
    .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[4]/SLICE_146/u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[4]/SLICE_146_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40034 \u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[4]/GATE ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), 
    .Z(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[4]/SLICE_146/u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[4]/GATE_H0 )
    );
  selmux2 \u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[4]/SLICE_146_K0K1MUX ( 
    .D0(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[4]/SLICE_146/u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[4]/GATE_H0 )
    , 
    .D1(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[4]/SLICE_146/u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[4]/SLICE_146_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module u_cg_fsm_u_sync_anode_phase_en_led_out_1_6_3__SLICE_147 ( input C1, B1, 
    A1, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[3]/SLICE_147/u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[3]/SLICE_147_K1_H1 
         , 
         \u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[3]/SLICE_147/u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[3]/GATE_H0 
         ;

  lut40033 \u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[3]/SLICE_147_K1 ( 
    .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[3]/SLICE_147/u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[3]/SLICE_147_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40034 \u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[3]/GATE ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), 
    .Z(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[3]/SLICE_147/u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[3]/GATE_H0 )
    );
  selmux2 \u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[3]/SLICE_147_K0K1MUX ( 
    .D0(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[3]/SLICE_147/u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[3]/GATE_H0 )
    , 
    .D1(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[3]/SLICE_147/u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[3]/SLICE_147_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module u_cg_fsm_u_sync_anode_phase_en_led_out_1_6_0__SLICE_148 ( input D1, C1, 
    B1, A1, C0, B0, A0, M0, output OFX0 );
  wire   
         \u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[0]/SLICE_148/u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[0]/SLICE_148_K1_H1 
         , GNDI, 
         \u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[0]/SLICE_148/u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[0]/GATE_H0 
         ;

  lut40036 \u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[0]/SLICE_148_K1 ( 
    .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[0]/SLICE_148/u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[0]/SLICE_148_K1_H1 )
    );
  lut40034 \u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[0]/GATE ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), 
    .Z(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[0]/SLICE_148/u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[0]/GATE_H0 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[0]/SLICE_148_K0K1MUX ( 
    .D0(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[0]/SLICE_148/u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[0]/GATE_H0 )
    , 
    .D1(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[0]/SLICE_148/u_cg_fsm/u_sync_anode_phase_en/led_out_1_6[0]/SLICE_148_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40036 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEE4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module u_cg_fsm_u_sync_anode_phase_en_sw1_max_count_num_1_1__SLICE_149 ( 
    input C1, B1, A1, D0, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \u_cg_fsm/u_sync_anode_phase_en/sw1_max_count_num_1[1]/SLICE_149/u_cg_fsm/u_sync_anode_phase_en/sw1_max_count_num_1[1]/SLICE_149_K1_H1 
         , 
         \u_cg_fsm/u_sync_anode_phase_en/sw1_max_count_num_1[1]/SLICE_149/u_cg_fsm/u_sync_anode_phase_en/sw1_max_count_num_1[1]/GATE_H0 
         ;

  lut40037 
    \u_cg_fsm/u_sync_anode_phase_en/sw1_max_count_num_1[1]/SLICE_149_K1 ( 
    .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\u_cg_fsm/u_sync_anode_phase_en/sw1_max_count_num_1[1]/SLICE_149/u_cg_fsm/u_sync_anode_phase_en/sw1_max_count_num_1[1]/SLICE_149_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40038 \u_cg_fsm/u_sync_anode_phase_en/sw1_max_count_num_1[1]/GATE ( 
    .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\u_cg_fsm/u_sync_anode_phase_en/sw1_max_count_num_1[1]/SLICE_149/u_cg_fsm/u_sync_anode_phase_en/sw1_max_count_num_1[1]/GATE_H0 )
    );
  selmux2 
    \u_cg_fsm/u_sync_anode_phase_en/sw1_max_count_num_1[1]/SLICE_149_K0K1MUX 
    ( 
    .D0(\u_cg_fsm/u_sync_anode_phase_en/sw1_max_count_num_1[1]/SLICE_149/u_cg_fsm/u_sync_anode_phase_en/sw1_max_count_num_1[1]/GATE_H0 )
    , 
    .D1(\u_cg_fsm/u_sync_anode_phase_en/sw1_max_count_num_1[1]/SLICE_149/u_cg_fsm/u_sync_anode_phase_en/sw1_max_count_num_1[1]/SLICE_149_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40037 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0606) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40038 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3C7C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module u_cg_fsm_u_sync_anode_phase_en_un1_c_dac_amp_0_0_sqmuxa_0__SLICE_150 ( 
    input B1, A1, D0, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \u_cg_fsm/u_sync_anode_phase_en/un1_c_dac_amp_0_0_sqmuxa[0]/SLICE_150/u_cg_fsm/u_sync_anode_phase_en/un1_c_dac_amp_0_0_sqmuxa[0]/SLICE_150_K1_H1 
         , 
         \u_cg_fsm/u_sync_anode_phase_en/un1_c_dac_amp_0_0_sqmuxa[0]/SLICE_150/u_cg_fsm/u_sync_anode_phase_en/un1_c_dac_amp_0_0_sqmuxa[0]/GATE_H0 
         ;

  lut40039 
    \u_cg_fsm/u_sync_anode_phase_en/un1_c_dac_amp_0_0_sqmuxa[0]/SLICE_150_K1 
    ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(\u_cg_fsm/u_sync_anode_phase_en/un1_c_dac_amp_0_0_sqmuxa[0]/SLICE_150/u_cg_fsm/u_sync_anode_phase_en/un1_c_dac_amp_0_0_sqmuxa[0]/SLICE_150_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40040 \u_cg_fsm/u_sync_anode_phase_en/un1_c_dac_amp_0_0_sqmuxa[0]/GATE ( 
    .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\u_cg_fsm/u_sync_anode_phase_en/un1_c_dac_amp_0_0_sqmuxa[0]/SLICE_150/u_cg_fsm/u_sync_anode_phase_en/un1_c_dac_amp_0_0_sqmuxa[0]/GATE_H0 )
    );
  selmux2 
    \u_cg_fsm/u_sync_anode_phase_en/un1_c_dac_amp_0_0_sqmuxa[0]/SLICE_150_K0K1MUX 
    ( 
    .D0(\u_cg_fsm/u_sync_anode_phase_en/un1_c_dac_amp_0_0_sqmuxa[0]/SLICE_150/u_cg_fsm/u_sync_anode_phase_en/un1_c_dac_amp_0_0_sqmuxa[0]/GATE_H0 )
    , 
    .D1(\u_cg_fsm/u_sync_anode_phase_en/un1_c_dac_amp_0_0_sqmuxa[0]/SLICE_150/u_cg_fsm/u_sync_anode_phase_en/un1_c_dac_amp_0_0_sqmuxa[0]/SLICE_150_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40039 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4444) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40040 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0800) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module u_cg_fsm_u_sync_anode_phase_en_led_out_1_5_7__SLICE_151 ( input C1, B1, 
    A1, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[7]/SLICE_151/u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[7]/SLICE_151_K1_H1 
         , 
         \u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[7]/SLICE_151/u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[7]/GATE_H0 
         ;

  lut40032 \u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[7]/SLICE_151_K1 ( 
    .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[7]/SLICE_151/u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[7]/SLICE_151_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40032 \u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[7]/GATE ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), 
    .Z(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[7]/SLICE_151/u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[7]/GATE_H0 )
    );
  selmux2 \u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[7]/SLICE_151_K0K1MUX ( 
    .D0(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[7]/SLICE_151/u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[7]/GATE_H0 )
    , 
    .D1(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[7]/SLICE_151/u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[7]/SLICE_151_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module u_cg_fsm_u_sync_anode_phase_en_led_out_1_5_5__SLICE_152 ( input C1, B1, 
    A1, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[5]/SLICE_152/u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[5]/SLICE_152_K1_H1 
         , 
         \u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[5]/SLICE_152/u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[5]/GATE_H0 
         ;

  lut40032 \u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[5]/SLICE_152_K1 ( 
    .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[5]/SLICE_152/u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[5]/SLICE_152_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40032 \u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[5]/GATE ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), 
    .Z(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[5]/SLICE_152/u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[5]/GATE_H0 )
    );
  selmux2 \u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[5]/SLICE_152_K0K1MUX ( 
    .D0(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[5]/SLICE_152/u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[5]/GATE_H0 )
    , 
    .D1(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[5]/SLICE_152/u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[5]/SLICE_152_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module u_cg_fsm_u_sync_anode_phase_en_led_out_1_5_4__SLICE_153 ( input C1, B1, 
    A1, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[4]/SLICE_153/u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[4]/SLICE_153_K1_H1 
         , 
         \u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[4]/SLICE_153/u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[4]/GATE_H0 
         ;

  lut40032 \u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[4]/SLICE_153_K1 ( 
    .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[4]/SLICE_153/u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[4]/SLICE_153_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40032 \u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[4]/GATE ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), 
    .Z(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[4]/SLICE_153/u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[4]/GATE_H0 )
    );
  selmux2 \u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[4]/SLICE_153_K0K1MUX ( 
    .D0(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[4]/SLICE_153/u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[4]/GATE_H0 )
    , 
    .D1(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[4]/SLICE_153/u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[4]/SLICE_153_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module u_cg_fsm_u_sync_anode_phase_en_led_out_1_5_3__SLICE_154 ( input C1, B1, 
    A1, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[3]/SLICE_154/u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[3]/SLICE_154_K1_H1 
         , 
         \u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[3]/SLICE_154/u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[3]/GATE_H0 
         ;

  lut40032 \u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[3]/SLICE_154_K1 ( 
    .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[3]/SLICE_154/u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[3]/SLICE_154_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40032 \u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[3]/GATE ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), 
    .Z(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[3]/SLICE_154/u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[3]/GATE_H0 )
    );
  selmux2 \u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[3]/SLICE_154_K0K1MUX ( 
    .D0(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[3]/SLICE_154/u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[3]/GATE_H0 )
    , 
    .D1(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[3]/SLICE_154/u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[3]/SLICE_154_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module u_cg_fsm_u_sync_anode_phase_en_led_out_1_5_0__SLICE_155 ( input C1, B1, 
    A1, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[0]/SLICE_155/u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[0]/SLICE_155_K1_H1 
         , 
         \u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[0]/SLICE_155/u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[0]/GATE_H0 
         ;

  lut40032 \u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[0]/SLICE_155_K1 ( 
    .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[0]/SLICE_155/u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[0]/SLICE_155_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40032 \u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[0]/GATE ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), 
    .Z(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[0]/SLICE_155/u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[0]/GATE_H0 )
    );
  selmux2 \u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[0]/SLICE_155_K0K1MUX ( 
    .D0(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[0]/SLICE_155/u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[0]/GATE_H0 )
    , 
    .D1(\u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[0]/SLICE_155/u_cg_fsm/u_sync_anode_phase_en/led_out_1_5[0]/SLICE_155_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module u_cg_fsm_led_out_1_2__SLICE_156 ( input C1, B1, A1, C0, B0, A0, M0, 
    output OFX0 );
  wire   GNDI, 
         \u_cg_fsm/led_out_1[2]/SLICE_156/u_cg_fsm/led_out_1[2]/SLICE_156_K1_H1 , 
         \u_cg_fsm/led_out_1[2]/SLICE_156/u_cg_fsm/led_out_1[2]/GATE_H0 ;

  lut40033 \u_cg_fsm/led_out_1[2]/SLICE_156_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\u_cg_fsm/led_out_1[2]/SLICE_156/u_cg_fsm/led_out_1[2]/SLICE_156_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40035 \u_cg_fsm/led_out_1[2]/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\u_cg_fsm/led_out_1[2]/SLICE_156/u_cg_fsm/led_out_1[2]/GATE_H0 ));
  selmux2 \u_cg_fsm/led_out_1[2]/SLICE_156_K0K1MUX ( 
    .D0(\u_cg_fsm/led_out_1[2]/SLICE_156/u_cg_fsm/led_out_1[2]/GATE_H0 ), 
    .D1(\u_cg_fsm/led_out_1[2]/SLICE_156/u_cg_fsm/led_out_1[2]/SLICE_156_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module u_cg_fsm_led_out_1_1__SLICE_157 ( input C1, B1, A1, C0, B0, A0, M0, 
    output OFX0 );
  wire   GNDI, 
         \u_cg_fsm/led_out_1[1]/SLICE_157/u_cg_fsm/led_out_1[1]/SLICE_157_K1_H1 , 
         \u_cg_fsm/led_out_1[1]/SLICE_157/u_cg_fsm/led_out_1[1]/GATE_H0 ;

  lut40033 \u_cg_fsm/led_out_1[1]/SLICE_157_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\u_cg_fsm/led_out_1[1]/SLICE_157/u_cg_fsm/led_out_1[1]/SLICE_157_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40035 \u_cg_fsm/led_out_1[1]/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\u_cg_fsm/led_out_1[1]/SLICE_157/u_cg_fsm/led_out_1[1]/GATE_H0 ));
  selmux2 \u_cg_fsm/led_out_1[1]/SLICE_157_K0K1MUX ( 
    .D0(\u_cg_fsm/led_out_1[1]/SLICE_157/u_cg_fsm/led_out_1[1]/GATE_H0 ), 
    .D1(\u_cg_fsm/led_out_1[1]/SLICE_157/u_cg_fsm/led_out_1[1]/SLICE_157_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module u_cg_fsm_led_out_1_6_6__SLICE_158 ( input C1, B1, A1, C0, B0, A0, M0, 
    output OFX0 );
  wire   GNDI, 
         \u_cg_fsm/led_out_1_6[6]/SLICE_158/u_cg_fsm/led_out_1_6[6]/SLICE_158_K1_H1 
         , \u_cg_fsm/led_out_1_6[6]/SLICE_158/u_cg_fsm/led_out_1_6[6]/GATE_H0 ;

  lut40033 \u_cg_fsm/led_out_1_6[6]/SLICE_158_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\u_cg_fsm/led_out_1_6[6]/SLICE_158/u_cg_fsm/led_out_1_6[6]/SLICE_158_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40034 \u_cg_fsm/led_out_1_6[6]/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\u_cg_fsm/led_out_1_6[6]/SLICE_158/u_cg_fsm/led_out_1_6[6]/GATE_H0 ));
  selmux2 \u_cg_fsm/led_out_1_6[6]/SLICE_158_K0K1MUX ( 
    .D0(\u_cg_fsm/led_out_1_6[6]/SLICE_158/u_cg_fsm/led_out_1_6[6]/GATE_H0 ), 
    .D1(\u_cg_fsm/led_out_1_6[6]/SLICE_158/u_cg_fsm/led_out_1_6[6]/SLICE_158_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module u_cg_fsm_led_out_1_6_2__SLICE_159 ( input C1, B1, A1, C0, B0, A0, M0, 
    output OFX0 );
  wire   GNDI, 
         \u_cg_fsm/led_out_1_6[2]/SLICE_159/u_cg_fsm/led_out_1_6[2]/SLICE_159_K1_H1 
         , \u_cg_fsm/led_out_1_6[2]/SLICE_159/u_cg_fsm/led_out_1_6[2]/GATE_H0 ;

  lut40033 \u_cg_fsm/led_out_1_6[2]/SLICE_159_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\u_cg_fsm/led_out_1_6[2]/SLICE_159/u_cg_fsm/led_out_1_6[2]/SLICE_159_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40034 \u_cg_fsm/led_out_1_6[2]/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\u_cg_fsm/led_out_1_6[2]/SLICE_159/u_cg_fsm/led_out_1_6[2]/GATE_H0 ));
  selmux2 \u_cg_fsm/led_out_1_6[2]/SLICE_159_K0K1MUX ( 
    .D0(\u_cg_fsm/led_out_1_6[2]/SLICE_159/u_cg_fsm/led_out_1_6[2]/GATE_H0 ), 
    .D1(\u_cg_fsm/led_out_1_6[2]/SLICE_159/u_cg_fsm/led_out_1_6[2]/SLICE_159_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module u_cg_fsm_led_out_1_6_1__SLICE_160 ( input D1, C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   
         \u_cg_fsm/led_out_1_6[1]/SLICE_160/u_cg_fsm/led_out_1_6[1]/SLICE_160_K1_H1 
         , GNDI, 
         \u_cg_fsm/led_out_1_6[1]/SLICE_160/u_cg_fsm/led_out_1_6[1]/GATE_H0 ;

  lut40036 \u_cg_fsm/led_out_1_6[1]/SLICE_160_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\u_cg_fsm/led_out_1_6[1]/SLICE_160/u_cg_fsm/led_out_1_6[1]/SLICE_160_K1_H1 )
    );
  lut40034 \u_cg_fsm/led_out_1_6[1]/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\u_cg_fsm/led_out_1_6[1]/SLICE_160/u_cg_fsm/led_out_1_6[1]/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \u_cg_fsm/led_out_1_6[1]/SLICE_160_K0K1MUX ( 
    .D0(\u_cg_fsm/led_out_1_6[1]/SLICE_160/u_cg_fsm/led_out_1_6[1]/GATE_H0 ), 
    .D1(\u_cg_fsm/led_out_1_6[1]/SLICE_160/u_cg_fsm/led_out_1_6[1]/SLICE_160_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module u_cg_fsm_led_out_1_5_6__SLICE_161 ( input C1, B1, A1, C0, B0, A0, M0, 
    output OFX0 );
  wire   GNDI, 
         \u_cg_fsm/led_out_1_5[6]/SLICE_161/u_cg_fsm/led_out_1_5[6]/SLICE_161_K1_H1 
         , \u_cg_fsm/led_out_1_5[6]/SLICE_161/u_cg_fsm/led_out_1_5[6]/GATE_H0 ;

  lut40032 \u_cg_fsm/led_out_1_5[6]/SLICE_161_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\u_cg_fsm/led_out_1_5[6]/SLICE_161/u_cg_fsm/led_out_1_5[6]/SLICE_161_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40032 \u_cg_fsm/led_out_1_5[6]/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\u_cg_fsm/led_out_1_5[6]/SLICE_161/u_cg_fsm/led_out_1_5[6]/GATE_H0 ));
  selmux2 \u_cg_fsm/led_out_1_5[6]/SLICE_161_K0K1MUX ( 
    .D0(\u_cg_fsm/led_out_1_5[6]/SLICE_161/u_cg_fsm/led_out_1_5[6]/GATE_H0 ), 
    .D1(\u_cg_fsm/led_out_1_5[6]/SLICE_161/u_cg_fsm/led_out_1_5[6]/SLICE_161_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module u_cg_fsm_led_out_1_5_2__SLICE_162 ( input C1, B1, A1, C0, B0, A0, M0, 
    output OFX0 );
  wire   GNDI, 
         \u_cg_fsm/led_out_1_5[2]/SLICE_162/u_cg_fsm/led_out_1_5[2]/SLICE_162_K1_H1 
         , \u_cg_fsm/led_out_1_5[2]/SLICE_162/u_cg_fsm/led_out_1_5[2]/GATE_H0 ;

  lut40032 \u_cg_fsm/led_out_1_5[2]/SLICE_162_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\u_cg_fsm/led_out_1_5[2]/SLICE_162/u_cg_fsm/led_out_1_5[2]/SLICE_162_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40032 \u_cg_fsm/led_out_1_5[2]/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\u_cg_fsm/led_out_1_5[2]/SLICE_162/u_cg_fsm/led_out_1_5[2]/GATE_H0 ));
  selmux2 \u_cg_fsm/led_out_1_5[2]/SLICE_162_K0K1MUX ( 
    .D0(\u_cg_fsm/led_out_1_5[2]/SLICE_162/u_cg_fsm/led_out_1_5[2]/GATE_H0 ), 
    .D1(\u_cg_fsm/led_out_1_5[2]/SLICE_162/u_cg_fsm/led_out_1_5[2]/SLICE_162_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_163 ( input D1, C1, B1, A1, D0, C0, B0, A0, CE, output F0, Q0, F1 );
  wire   GNDI, VCCI;

  lut40041 \u_cg_fsm/un1_w_disabled_dac_sel_found_2_RNIIIJ41 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40042 \u_cg_fsm/r_search_disabled_channel_phase_RNI843J1 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre r_req_mode_transition( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q0));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40041 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAA8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40042 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4F44) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_164 ( input D1, C1, B1, A1, D0, C0, B0, A0, CE, output F0, Q0, F1, 
    Q1 );
  wire   GNDI, VCCI;

  lut40043 sw2_counter_lcry_0_RNO( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4 sw2_counter26_c4( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \r_channel_1[3] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0008 \r_channel_1[2] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40043 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5557) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_165 ( input D1, C1, B1, A1, B0, A0, CE, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI;

  lut40044 sw2_counter30_c3( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40020 sw2_counter_lcry_0_RNO_0( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0008 \r_dac_amp_0[1] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0008 \r_dac_amp_0[0] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40044 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEA80) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module u_cg_fsm_SLICE_166 ( input C1, B1, A1, D0, C0, B0, A0, CE, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI;

  lut40045 \u_cg_fsm/u_sync_anode_phase_en/sw1_max_count_num15 ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40046 \u_cg_fsm/u_sync_anode_phase_en/sw1_max_count_num15_RNI2FRS ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \u_cg_fsm/r_interval_cnt[7] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/r_interval_cnt[6] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40045 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0404) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40046 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCECC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module u_cg_fsm_SLICE_167 ( input D1, C1, B1, A1, D0, C0, B0, A0, CE, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI;

  lut40047 \u_cg_fsm/u_sync_anode_phase_en/c_channel_1_0_sqmuxa_2 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40046 \u_cg_fsm/u_sync_anode_phase_en/c_channel_1_0_sqmuxa_2_RNIEJMU ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \u_cg_fsm/r_channel_1[1] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/r_channel_1[0] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40047 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module u_cg_fsm_SLICE_168 ( input D1, C1, B1, A1, D0, C0, B0, A0, CE, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI;

  lut40048 \u_cg_fsm/led_out_1_sn_m9_i ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40031 \u_cg_fsm/u_sync_anode_phase_en/led_out_1[7] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \u_cg_fsm/r_duration[5] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/r_duration[4] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40048 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF0F8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module u_cg_fsm_SLICE_169 ( input B1, A1, D0, C0, B0, A0, CE, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI;

  lut40020 \u_cg_fsm/u_sync_anode_phase_en/led_out_1_sn_m6_0_a2 ( .A(A1), 
    .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40031 \u_cg_fsm/u_sync_anode_phase_en/led_out_1[5] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \u_cg_fsm/r_duration[3] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/r_duration[2] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module u_cg_fsm_SLICE_170 ( input C1, B1, A1, C0, B0, A0, CE, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI;

  lut40049 \u_cg_fsm/u_sync_anode_phase_en/sw1_max_count_num15_RNI11L4 ( 
    .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40050 \u_cg_fsm/u_sync_anode_phase_en/sw1_max_count_num_1[3] ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre \u_cg_fsm/r_rate[1] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/r_rate[0] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40049 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0606) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40050 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF4F4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_171 ( input B1, A1, D0, C0, B0, A0, CE, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI;

  lut40027 w_sw1_pb_p( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40051 \u_cg_fsm/u_sync_anode_phase_en/c_dac_amp_1_0_sqmuxa_1_RNI44MK ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \u_cg_fsm/r_channel_1[5] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/r_channel_1[4] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40051 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_172 ( input B1, A1, D0, C0, B0, A0, CE, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI;

  lut40027 sw2_counter26_ac0_1( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40052 \u_cg_fsm/u_sync_anode_phase_en/c_rate_1_sqmuxa_i ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \u_cg_fsm/r_channel_1[7] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/r_channel_1[6] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40052 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAEAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_173 ( input D1, C1, B1, A1, C0, B0, A0, CE, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI;

  lut40053 \sw1_max_count_num_3_6_.m3 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40054 \u_cg_fsm/u_sync_anode_phase_en/sw1_max_count_num_1[6] ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \u_cg_fsm/r_rate[3] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/r_rate[2] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40053 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3878) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40054 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE4E4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_174 ( input C1, B1, A1, D0, C0, B0, A0, CE, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI;

  lut40055 un1_w_async_ack_mode_transition_p( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40056 \u_cg_fsm/u_sync_anode_phase_en/un1_r_mode_NE ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \u_cg_fsm/r_rate[7] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/r_rate[6] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40055 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF2F2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40056 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF6) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module u_cg_fsm_SLICE_175 ( input D1, C1, B1, A1, D0, C0, B0, A0, CE, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI;

  lut40057 \u_cg_fsm/u_sync_anode_phase_en/sw1_counter29lto7_4_RNIMROK ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4 \u_cg_fsm/u_sync_anode_phase_en/sw1_counter29lto7_4 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \u_cg_fsm/r_interval_cnt[3] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/r_interval_cnt[2] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40057 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1FFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module u_cg_fsm_SLICE_176 ( input D1, C1, B1, A1, B0, A0, CE, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI;

  lut40058 \u_cg_fsm/r_duration_cnt19_i ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40027 \u_cg_fsm/u_sync_cathod_phase_en/o_sen ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \u_cg_fsm/r_search_disabled_channel[1] ( .D0(GNDI), .D1(VCCI), 
    .SD(GNDI), .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/r_search_disabled_channel[0] ( .D0(GNDI), .D1(VCCI), 
    .SD(GNDI), .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40058 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h000D) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module u_cg_fsm_SLICE_177 ( input D1, C1, B1, A1, C0, B0, A0, CE, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI;

  lut40059 \u_cg_fsm/w_bcg_fsm_start ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40028 \u_cg_fsm/u_sync_cathod_phase_en/un1_i_men_1 ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \u_cg_fsm/r_search_disabled_channel[5] ( .D0(GNDI), .D1(VCCI), 
    .SD(GNDI), .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/r_search_disabled_channel[4] ( .D0(GNDI), .D1(VCCI), 
    .SD(GNDI), .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40059 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAE04) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_178 ( input B1, A1, D0, C0, B0, A0, CE, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI;

  lut40026 \u_cg_fsm/c_map_cathod_channel_0_o2[0] ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40060 \u_cg_fsm/c_map_cathod_channel_0_o2_RNIE7FH[0] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0008 \r_dac_amp_1[5] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \r_dac_amp_1[4] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40060 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCCCD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module u_cg_fsm_SLICE_179 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40061 \u_cg_fsm/c_stim_ca_0_0_a2[6] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40062 \u_cg_fsm/un1_w_disabled_dac_sel_found_3 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \u_cg_fsm/r_sync_duration[7] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \u_cg_fsm/r_sync_duration[6] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40061 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40062 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF10) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module u_cg_fsm_SLICE_180 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40047 \u_cg_fsm/c_map_cathod_channel_0_a2[3] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40062 \u_cg_fsm/un1_w_disabled_dac_sel_found_4 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \u_cg_fsm/r_sync_rate[1] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \u_cg_fsm/r_sync_rate[0] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module u_cg_fsm_SLICE_181 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40063 \u_cg_fsm/c_stim_ca_0_0_o3[0] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40062 \u_cg_fsm/un1_w_disabled_dac_sel_found_0 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \u_cg_fsm/r_sync_duration[1] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \u_cg_fsm/r_sync_duration[0] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40063 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAAB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module u_cg_fsm_SLICE_182 ( input B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40026 \u_cg_fsm/c_map_cathod_channel[5] ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40064 \u_cg_fsm/un1_w_disabled_dac_sel_found_1 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \u_cg_fsm/r_sync_duration[3] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/r_sync_duration[2] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40064 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7350) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module u_cg_fsm_SLICE_183 ( input C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40065 \u_cg_fsm/c_map_cathod_channel_0_a3[7] ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40062 \u_cg_fsm/un1_w_disabled_dac_sel_found_2 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \u_cg_fsm/r_sync_duration[5] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/r_sync_duration[4] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40065 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_184 ( input D1, C1, B1, A1, C0, B0, A0, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI;

  lut40066 \u_cg_fsm/c_stim_ca_0_0_a2[4] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40067 \u_cg_fsm/un2_w_disabled_dac_sel_found[4] ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_db_sw1_pb_d[0] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(VCCI), 
    .CK(GNDI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \r_async_ack_mode_transition[2] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40066 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0100) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40067 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_185 ( input D1, C1, B1, A1, C0, B0, A0, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI;

  lut40068 \u_cg_fsm/c_map_cathod_channel_0_a2[1] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40067 \u_cg_fsm/un2_w_disabled_dac_sel_found[1] ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \r_async_ack_mode_transition[1] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(GNDI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre pb_p_test( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(GNDI), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40068 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0004) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module u_cg_fsm_SLICE_186 ( input D1, C1, B1, A1, D0, C0, B0, A0, CE, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI;

  lut40069 \u_cg_fsm/r_rate_phase11 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4 \u_cg_fsm/r_sync_trigger_d_RNI67UL ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \u_cg_fsm/r_channel_0[1] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/r_channel_0[0] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40069 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0008) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_187 ( input D1, C1, B1, A1, D0, C0, B0, A0, CE, output F0, Q0, F1, 
    Q1 );
  wire   GNDI, VCCI;

  lut4 \u_cg_fsm/c_stim_ca_0_0_o2[0] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40068 \u_cg_fsm/c_stim_ca_0_0_a2[1] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \r_duration[1] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \r_duration[0] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_188 ( input C1, B1, A1, C0, B0, A0, CE, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI;

  lut40070 \u_cg_fsm/c_stim_an_1_a2[7] ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40070 \u_cg_fsm/c_map_cathod_channel_0_a2[4] ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre \r_dac_amp_1[1] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \r_dac_amp_1[0] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40070 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0202) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_189 ( input D1, C1, B1, A1, B0, A0, CE, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI;

  lut40047 \u_cg_fsm/c_map_cathod_channel_122 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40026 \u_cg_fsm/c_map_cathod_channel[2] ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0008 \r_dac_amp_0[3] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0008 \r_dac_amp_0[2] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_190 ( input C1, B1, A1, C0, B0, A0, CE, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI;

  lut40071 \u_cg_fsm/r_state_ns_a2_0[3] ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40028 \u_cg_fsm/r_interval_phase_RNO ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre \r_rate[7] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), .CK(GNDI), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \r_rate[6] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), .CK(GNDI), 
    .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40071 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_191 ( input D1, C1, B1, A1, D0, C0, B0, A0, CE, output F0, Q0, F1, 
    Q1 );
  wire   GNDI, VCCI;

  lut40072 \u_cg_fsm/r_duration_cnt19 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40073 \u_cg_fsm/r_duration_cnt15_cry_7_0_RNIO51T ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \r_rate[5] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), .CK(GNDI), 
    .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \r_rate[4] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), .CK(GNDI), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40072 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEFEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40073 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEEC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_192 ( input B1, A1, D0, C0, B0, A0, CE, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI;

  lut40027 \u_cg_fsm/c_map_cathod_channel_125_1 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40047 \u_cg_fsm/c_map_cathod_channel_125 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \r_dac_amp_1[7] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0008 \r_dac_amp_1[6] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_193 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40026 \u_trigger_en/un1_i_men_1 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40074 \u_cg_fsm/w_trigger_en ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40074 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0D00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_194 ( input D1, C1, B1, A1, D0, C0, B0, A0, CE, output F0, Q0, F1, 
    Q1 );
  wire   GNDI, VCCI;

  lut40075 \u_cg_fsm/c_map_cathod_channel_022_0_a3 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40047 \u_cg_fsm/c_map_cathod_channel_023_0_a2 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0008 \r_dac_amp_0[5] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0008 \r_dac_amp_0[4] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40075 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_195 ( input D1, C1, B1, A1, D0, C0, B0, A0, CE, output F0, Q0, F1, 
    Q1 );
  wire   GNDI, VCCI;

  lut40076 \u_cg_fsm/c_map_cathod_channel_027_0_a2 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40077 \u_cg_fsm/c_map_cathod_channel_025_0_a3 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0008 \r_dac_amp_0[7] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0008 \r_dac_amp_0[6] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40076 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40077 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0400) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_196 ( input D1, C1, B1, A1, C0, B0, A0, CE, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI;

  lut40023 \sw2_counter_RNII6K3[3] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40067 \u_cg_fsm/u_sync_anode_phase_en/c_dac_amp_1_0_sqmuxa_1 ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \u_cg_fsm/r_channel_1[3] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/r_channel_1[2] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module u_cg_fsm_SLICE_197 ( input D1, C1, B1, A1, D0, C0, B0, A0, CE, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI;

  lut40031 \u_cg_fsm/led_out_1[6] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40031 \u_cg_fsm/u_sync_anode_phase_en/led_out_1[4] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \u_cg_fsm/r_duration[1] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/r_duration[0] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module u_cg_fsm_SLICE_198 ( input B1, A1, B0, A0, CE, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI;

  lut40078 \u_cg_fsm/u_sync_anode_phase_en/sw1_counter_1_sqmuxa_i ( .A(A1), 
    .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40079 \u_cg_fsm/u_sync_anode_phase_en/sw1_counter_1_sqmuxa ( .A(A0), 
    .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre \u_cg_fsm/r_interval_cnt[5] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/r_interval_cnt[4] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40078 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDDDD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40079 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4444) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module u_cg_fsm_SLICE_199 ( input B1, A1, C0, B0, A0, CE, output F0, Q0, F1, 
    Q1 );
  wire   GNDI, VCCI;

  lut40029 \u_cg_fsm/u_sync_anode_phase_en/CO1 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40045 \u_cg_fsm/u_sync_anode_phase_en/led_out_1_sn_m5_0_a2 ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre \u_cg_fsm/r_duration[7] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/r_duration[6] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module u_cg_fsm_SLICE_200 ( input D1, C1, B1, A1, C0, B0, A0, CE, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI;

  lut40080 \u_cg_fsm/r_search_disabled_channel_phase_RNO ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40081 
    \u_cg_fsm/u_sync_search_disabled_channel_phase_end_p/r_master_en_RNO ( 
    .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \u_cg_fsm/r_search_disabled_channel[7] ( .D0(GNDI), .D1(VCCI), 
    .SD(GNDI), .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/r_search_disabled_channel[6] ( .D0(GNDI), .D1(VCCI), 
    .SD(GNDI), .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40080 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4F44) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40081 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAEAE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module u_cg_fsm_SLICE_201 ( input C1, B1, A1, C0, B0, A0, CE, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI;

  lut40082 \u_cg_fsm/un1_i_polarity_1 ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40082 \u_cg_fsm/u_sync_trigger/r_master_en_RNO ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre \u_cg_fsm/r_search_disabled_channel_phase ( .D0(GNDI), .D1(VCCI), 
    .SD(GNDI), .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40082 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBABA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module u_cg_fsm_SLICE_202 ( input C1, B1, A1, B0, A0, CE, output F0, Q0, F1, 
    Q1 );
  wire   GNDI, VCCI;

  lut40028 \u_cg_fsm/un1_r_ack_mode_transition ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40029 \u_cg_fsm/sw1_counter_0_sqmuxa ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre \u_cg_fsm/r_channel_0[5] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/r_channel_0[4] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_203 ( input C1, B1, A1, B0, A0, CE, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI;

  lut40083 sw2_counter_lcry_0_RNO_1( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40026 sw2_counter30_c4( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre \r_channel_1[5] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \r_channel_1[4] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40083 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module u_cg_fsm_SLICE_204 ( input D1, C1, B1, A1, D0, C0, B0, A0, CE, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI;

  lut40084 \u_cg_fsm/u_sync_anode_phase_en/un1_r_mode_NE_1 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40085 \u_cg_fsm/u_sync_anode_phase_en/c_channel_0_0_sqmuxa_1_i ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \u_cg_fsm/r_channel_0[7] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q1));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/r_channel_0[6] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40084 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7BDE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40085 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEAAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module u_cg_fsm_SLICE_205 ( input D1, C1, B1, A1, B0, A0, CE, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI;

  lut40086 \u_cg_fsm/r_anode_phase_RNO ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40026 \u_cg_fsm/u_sync_anode_phase_en/r_slave_en8 ( .A(A0), .B(B0), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \u_cg_fsm/r_interval_cnt[1] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/r_interval_cnt[0] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40086 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8F88) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module u_cg_fsm_SLICE_206 ( input C1, B1, A1, C0, B0, A0, CE, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI;

  lut40083 \u_cg_fsm/w_interval_tmout_0_I_21_0_RNIIPMU ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40082 \u_cg_fsm/u_sync_anode_phase_en/un1_i_men_1 ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre \u_cg_fsm/r_rate[5] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/r_rate[4] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module u_cg_fsm_SLICE_207 ( input D1, C1, B1, A1, B0, A0, CE, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI;

  lut40086 \u_cg_fsm/r_cathod_phase_RNO ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40026 \u_cg_fsm/u_sync_cathod_phase_en/r_slave_en8 ( .A(A0), .B(B0), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \u_cg_fsm/r_search_disabled_channel[3] ( .D0(GNDI), .D1(VCCI), 
    .SD(GNDI), .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/r_search_disabled_channel[2] ( .D0(GNDI), .D1(VCCI), 
    .SD(GNDI), .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_208 ( input B1, A1, C0, B0, A0, CE, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI;

  lut40020 \u_cg_fsm/c_map_cathod_channel_122_1 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40071 \u_cg_fsm/c_map_cathod_channel_0_a2[6] ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre \r_dac_amp_1[3] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0008 \r_dac_amp_1[2] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(CE), 
    .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module u_cg_fsm_SLICE_209 ( input B1, A1, C0, B0, A0, CE, output F0, Q0, F1, 
    Q1 );
  wire   GNDI, VCCI;

  lut40026 \u_cg_fsm/un1_r_sync_search_disabled_channel_phase_end_p_d ( .A(A1), 
    .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40087 \u_cg_fsm/r_sync_trigger_d_RNI89HK ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre \u_cg_fsm/r_channel_0[3] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \u_cg_fsm/r_channel_0[2] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(CE), .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40087 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0101) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_210 ( input B1, A1, B0, A0, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI;

  lut40079 \u_cg_fsm/r_disabled_dac_sel_found_d_RNIKRLA1 ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40029 \u_cg_fsm/w_bcg_fsm_start_RNIH50P ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre \r_mode[0] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), .SP(VCCI), 
    .CK(GNDI), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0008 \r_db_sw1_pb_d[1] ( .D0(GNDI), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(GNDI), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module led_out_0_ ( input PADDO, output ledout0 );
  wire   GNDI;

  xo2iobuf \led_out_pad[0] ( .I(PADDO), .T(GNDI), .PAD(ledout0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ledout0) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf ( input I, T, output PAD );

  OBZPD INST5( .I(I), .T(T), .O(PAD));
endmodule

module i_rst_n ( output PADDI, input i_rst_n );

  xo2iobuf0088 i_rst_n_pad( .Z(PADDI), .PAD(i_rst_n));

  specify
    (i_rst_n => PADDI) = (0:0:0,0:0:0);
    $width (posedge i_rst_n, 0:0:0);
    $width (negedge i_rst_n, 0:0:0);
  endspecify

endmodule

module xo2iobuf0088 ( output Z, input PAD );

  IBPU INST1( .I(PAD), .O(Z));
endmodule

module stim_bcg1_sel_2_ ( input IOLDO, output stimbcg1sel2 );
  wire   GNDI;

  xo2iobuf \stim_bcg1_sel_pad[2] ( .I(IOLDO), .T(GNDI), .PAD(stimbcg1sel2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stimbcg1sel2) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_bcg1_sel_2__MGIOL ( output IOLDO, input OPOS, CE );
  wire   GNDI;

  mfflsre \u_cg_fsm_r_stim_bcg1_selio[2] ( .D0(OPOS), .SP(CE), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module mfflsre ( input D0, SP, CK, LSR, output Q );

  FD1P3DX INST01( .D(D0), .SP(SP), .CK(CK), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module stim_bcg1_sel_1_ ( input IOLDO, output stimbcg1sel1 );
  wire   GNDI;

  xo2iobuf \stim_bcg1_sel_pad[1] ( .I(IOLDO), .T(GNDI), .PAD(stimbcg1sel1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stimbcg1sel1) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_bcg1_sel_1__MGIOL ( output IOLDO, input OPOS, CE );
  wire   GNDI;

  mfflsre \u_cg_fsm_r_stim_bcg1_selio[1] ( .D0(OPOS), .SP(CE), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_bcg1_sel_0_ ( input IOLDO, output stimbcg1sel0 );
  wire   GNDI;

  xo2iobuf \stim_bcg1_sel_pad[0] ( .I(IOLDO), .T(GNDI), .PAD(stimbcg1sel0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stimbcg1sel0) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_bcg1_sel_0__MGIOL ( output IOLDO, input OPOS, CE );
  wire   GNDI;

  mfflsre \u_cg_fsm_r_stim_bcg1_selio[0] ( .D0(OPOS), .SP(CE), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_bcg0_sel_2_ ( input IOLDO, output stimbcg0sel2 );
  wire   GNDI;

  xo2iobuf \stim_bcg0_sel_pad[2] ( .I(IOLDO), .T(GNDI), .PAD(stimbcg0sel2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stimbcg0sel2) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_bcg0_sel_2__MGIOL ( output IOLDO, input OPOS, CE );
  wire   GNDI;

  mfflsre \u_cg_fsm_r_stim_bcg0_selio[2] ( .D0(OPOS), .SP(CE), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_bcg0_sel_1_ ( input IOLDO, output stimbcg0sel1 );
  wire   GNDI;

  xo2iobuf \stim_bcg0_sel_pad[1] ( .I(IOLDO), .T(GNDI), .PAD(stimbcg0sel1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stimbcg0sel1) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_bcg0_sel_1__MGIOL ( output IOLDO, input OPOS, CE );
  wire   GNDI;

  mfflsre \u_cg_fsm_r_stim_bcg0_selio[1] ( .D0(OPOS), .SP(CE), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_bcg0_sel_0_ ( input IOLDO, output stimbcg0sel0 );
  wire   GNDI;

  xo2iobuf \stim_bcg0_sel_pad[0] ( .I(IOLDO), .T(GNDI), .PAD(stimbcg0sel0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stimbcg0sel0) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_bcg0_sel_0__MGIOL ( output IOLDO, input OPOS, CE );
  wire   GNDI;

  mfflsre \u_cg_fsm_r_stim_bcg0_selio[0] ( .D0(OPOS), .SP(CE), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_dac1_val_7_ ( input IOLDO, output stimdac1val7 );
  wire   GNDI;

  xo2iobuf \stim_dac1_val_pad[7] ( .I(IOLDO), .T(GNDI), .PAD(stimdac1val7));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stimdac1val7) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_dac1_val_7__MGIOL ( output IOLDO, input OPOS, CE );
  wire   GNDI;

  mfflsre \u_cg_fsm_r_stim_dac1_valio[7] ( .D0(OPOS), .SP(CE), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_dac1_val_6_ ( input IOLDO, output stimdac1val6 );
  wire   GNDI;

  xo2iobuf \stim_dac1_val_pad[6] ( .I(IOLDO), .T(GNDI), .PAD(stimdac1val6));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stimdac1val6) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_dac1_val_6__MGIOL ( output IOLDO, input OPOS, CE );
  wire   GNDI;

  mfflsre \u_cg_fsm_r_stim_dac1_valio[6] ( .D0(OPOS), .SP(CE), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_dac1_val_5_ ( input IOLDO, output stimdac1val5 );
  wire   GNDI;

  xo2iobuf \stim_dac1_val_pad[5] ( .I(IOLDO), .T(GNDI), .PAD(stimdac1val5));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stimdac1val5) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_dac1_val_5__MGIOL ( output IOLDO, input OPOS, CE );
  wire   GNDI;

  mfflsre \u_cg_fsm_r_stim_dac1_valio[5] ( .D0(OPOS), .SP(CE), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_dac1_val_4_ ( input IOLDO, output stimdac1val4 );
  wire   GNDI;

  xo2iobuf \stim_dac1_val_pad[4] ( .I(IOLDO), .T(GNDI), .PAD(stimdac1val4));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stimdac1val4) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_dac1_val_4__MGIOL ( output IOLDO, input OPOS, CE );
  wire   GNDI;

  mfflsre \u_cg_fsm_r_stim_dac1_valio[4] ( .D0(OPOS), .SP(CE), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_dac1_val_3_ ( input IOLDO, output stimdac1val3 );
  wire   GNDI;

  xo2iobuf \stim_dac1_val_pad[3] ( .I(IOLDO), .T(GNDI), .PAD(stimdac1val3));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stimdac1val3) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_dac1_val_3__MGIOL ( output IOLDO, input OPOS, CE );
  wire   GNDI;

  mfflsre \u_cg_fsm_r_stim_dac1_valio[3] ( .D0(OPOS), .SP(CE), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_dac1_val_2_ ( input IOLDO, output stimdac1val2 );
  wire   GNDI;

  xo2iobuf \stim_dac1_val_pad[2] ( .I(IOLDO), .T(GNDI), .PAD(stimdac1val2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stimdac1val2) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_dac1_val_2__MGIOL ( output IOLDO, input OPOS, CE );
  wire   GNDI;

  mfflsre \u_cg_fsm_r_stim_dac1_valio[2] ( .D0(OPOS), .SP(CE), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_dac1_val_1_ ( input IOLDO, output stimdac1val1 );
  wire   GNDI;

  xo2iobuf \stim_dac1_val_pad[1] ( .I(IOLDO), .T(GNDI), .PAD(stimdac1val1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stimdac1val1) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_dac1_val_1__MGIOL ( output IOLDO, input OPOS, CE );
  wire   GNDI;

  mfflsre \u_cg_fsm_r_stim_dac1_valio[1] ( .D0(OPOS), .SP(CE), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_dac1_val_0_ ( input IOLDO, output stimdac1val0 );
  wire   GNDI;

  xo2iobuf \stim_dac1_val_pad[0] ( .I(IOLDO), .T(GNDI), .PAD(stimdac1val0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stimdac1val0) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_dac1_val_0__MGIOL ( output IOLDO, input OPOS, CE );
  wire   GNDI;

  mfflsre \u_cg_fsm_r_stim_dac1_valio[0] ( .D0(OPOS), .SP(CE), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_dac0_val_7_ ( input IOLDO, output stimdac0val7 );
  wire   GNDI;

  xo2iobuf \stim_dac0_val_pad[7] ( .I(IOLDO), .T(GNDI), .PAD(stimdac0val7));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stimdac0val7) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_dac0_val_7__MGIOL ( output IOLDO, input OPOS, CE );
  wire   GNDI;

  mfflsre \u_cg_fsm_r_stim_dac0_valio[7] ( .D0(OPOS), .SP(CE), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_dac0_val_6_ ( input IOLDO, output stimdac0val6 );
  wire   GNDI;

  xo2iobuf \stim_dac0_val_pad[6] ( .I(IOLDO), .T(GNDI), .PAD(stimdac0val6));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stimdac0val6) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_dac0_val_6__MGIOL ( output IOLDO, input OPOS, CE );
  wire   GNDI;

  mfflsre \u_cg_fsm_r_stim_dac0_valio[6] ( .D0(OPOS), .SP(CE), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_dac0_val_5_ ( input IOLDO, output stimdac0val5 );
  wire   GNDI;

  xo2iobuf \stim_dac0_val_pad[5] ( .I(IOLDO), .T(GNDI), .PAD(stimdac0val5));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stimdac0val5) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_dac0_val_5__MGIOL ( output IOLDO, input OPOS, CE );
  wire   GNDI;

  mfflsre \u_cg_fsm_r_stim_dac0_valio[5] ( .D0(OPOS), .SP(CE), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_dac0_val_4_ ( input IOLDO, output stimdac0val4 );
  wire   GNDI;

  xo2iobuf \stim_dac0_val_pad[4] ( .I(IOLDO), .T(GNDI), .PAD(stimdac0val4));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stimdac0val4) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_dac0_val_4__MGIOL ( output IOLDO, input OPOS, CE );
  wire   GNDI;

  mfflsre \u_cg_fsm_r_stim_dac0_valio[4] ( .D0(OPOS), .SP(CE), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_dac0_val_3_ ( input IOLDO, output stimdac0val3 );
  wire   GNDI;

  xo2iobuf \stim_dac0_val_pad[3] ( .I(IOLDO), .T(GNDI), .PAD(stimdac0val3));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stimdac0val3) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_dac0_val_3__MGIOL ( output IOLDO, input OPOS, CE );
  wire   GNDI;

  mfflsre \u_cg_fsm_r_stim_dac0_valio[3] ( .D0(OPOS), .SP(CE), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_dac0_val_2_ ( input IOLDO, output stimdac0val2 );
  wire   GNDI;

  xo2iobuf \stim_dac0_val_pad[2] ( .I(IOLDO), .T(GNDI), .PAD(stimdac0val2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stimdac0val2) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_dac0_val_2__MGIOL ( output IOLDO, input OPOS, CE );
  wire   GNDI;

  mfflsre \u_cg_fsm_r_stim_dac0_valio[2] ( .D0(OPOS), .SP(CE), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_dac0_val_1_ ( input IOLDO, output stimdac0val1 );
  wire   GNDI;

  xo2iobuf \stim_dac0_val_pad[1] ( .I(IOLDO), .T(GNDI), .PAD(stimdac0val1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stimdac0val1) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_dac0_val_1__MGIOL ( output IOLDO, input OPOS, CE );
  wire   GNDI;

  mfflsre \u_cg_fsm_r_stim_dac0_valio[1] ( .D0(OPOS), .SP(CE), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_dac0_val_0_ ( input IOLDO, output stimdac0val0 );
  wire   GNDI;

  xo2iobuf \stim_dac0_val_pad[0] ( .I(IOLDO), .T(GNDI), .PAD(stimdac0val0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stimdac0val0) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_dac0_val_0__MGIOL ( output IOLDO, input OPOS, CE );
  wire   GNDI;

  mfflsre \u_cg_fsm_r_stim_dac0_valio[0] ( .D0(OPOS), .SP(CE), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_ca_7_ ( input IOLDO, output stimca7 );
  wire   GNDI;

  xo2iobuf \stim_ca_pad[7] ( .I(IOLDO), .T(GNDI), .PAD(stimca7));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stimca7) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_ca_7__MGIOL ( output IOLDO, input OPOS );
  wire   VCCI, GNDI;

  mfflsre \u_cg_fsm_r_stim_caio[7] ( .D0(OPOS), .SP(VCCI), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_ca_6_ ( input IOLDO, output stimca6 );
  wire   GNDI;

  xo2iobuf \stim_ca_pad[6] ( .I(IOLDO), .T(GNDI), .PAD(stimca6));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stimca6) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_ca_6__MGIOL ( output IOLDO, input OPOS );
  wire   VCCI, GNDI;

  mfflsre \u_cg_fsm_r_stim_caio[6] ( .D0(OPOS), .SP(VCCI), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_ca_5_ ( input IOLDO, output stimca5 );
  wire   GNDI;

  xo2iobuf \stim_ca_pad[5] ( .I(IOLDO), .T(GNDI), .PAD(stimca5));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stimca5) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_ca_5__MGIOL ( output IOLDO, input OPOS );
  wire   VCCI, GNDI;

  mfflsre \u_cg_fsm_r_stim_caio[5] ( .D0(OPOS), .SP(VCCI), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_ca_4_ ( input IOLDO, output stimca4 );
  wire   GNDI;

  xo2iobuf \stim_ca_pad[4] ( .I(IOLDO), .T(GNDI), .PAD(stimca4));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stimca4) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_ca_4__MGIOL ( output IOLDO, input OPOS );
  wire   VCCI, GNDI;

  mfflsre \u_cg_fsm_r_stim_caio[4] ( .D0(OPOS), .SP(VCCI), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_ca_3_ ( input IOLDO, output stimca3 );
  wire   GNDI;

  xo2iobuf \stim_ca_pad[3] ( .I(IOLDO), .T(GNDI), .PAD(stimca3));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stimca3) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_ca_3__MGIOL ( output IOLDO, input OPOS );
  wire   VCCI, GNDI;

  mfflsre \u_cg_fsm_r_stim_caio[3] ( .D0(OPOS), .SP(VCCI), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_ca_2_ ( input IOLDO, output stimca2 );
  wire   GNDI;

  xo2iobuf \stim_ca_pad[2] ( .I(IOLDO), .T(GNDI), .PAD(stimca2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stimca2) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_ca_2__MGIOL ( output IOLDO, input OPOS );
  wire   VCCI, GNDI;

  mfflsre \u_cg_fsm_r_stim_caio[2] ( .D0(OPOS), .SP(VCCI), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_ca_1_ ( input IOLDO, output stimca1 );
  wire   GNDI;

  xo2iobuf \stim_ca_pad[1] ( .I(IOLDO), .T(GNDI), .PAD(stimca1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stimca1) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_ca_1__MGIOL ( output IOLDO, input OPOS );
  wire   VCCI, GNDI;

  mfflsre \u_cg_fsm_r_stim_caio[1] ( .D0(OPOS), .SP(VCCI), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_ca_0_ ( input IOLDO, output stimca0 );
  wire   GNDI;

  xo2iobuf \stim_ca_pad[0] ( .I(IOLDO), .T(GNDI), .PAD(stimca0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stimca0) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_ca_0__MGIOL ( output IOLDO, input OPOS );
  wire   VCCI, GNDI;

  mfflsre \u_cg_fsm_r_stim_caio[0] ( .D0(OPOS), .SP(VCCI), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_an_7_ ( input IOLDO, output stiman7 );
  wire   GNDI;

  xo2iobuf \stim_an_pad[7] ( .I(IOLDO), .T(GNDI), .PAD(stiman7));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stiman7) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_an_7__MGIOL ( output IOLDO, input OPOS );
  wire   VCCI, GNDI;

  mfflsre \u_cg_fsm_r_stim_anio[7] ( .D0(OPOS), .SP(VCCI), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_an_6_ ( input IOLDO, output stiman6 );
  wire   GNDI;

  xo2iobuf \stim_an_pad[6] ( .I(IOLDO), .T(GNDI), .PAD(stiman6));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stiman6) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_an_6__MGIOL ( output IOLDO, input OPOS );
  wire   VCCI, GNDI;

  mfflsre \u_cg_fsm_r_stim_anio[6] ( .D0(OPOS), .SP(VCCI), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_an_5_ ( input IOLDO, output stiman5 );
  wire   GNDI;

  xo2iobuf \stim_an_pad[5] ( .I(IOLDO), .T(GNDI), .PAD(stiman5));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stiman5) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_an_5__MGIOL ( output IOLDO, input OPOS );
  wire   VCCI, GNDI;

  mfflsre \u_cg_fsm_r_stim_anio[5] ( .D0(OPOS), .SP(VCCI), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_an_4_ ( input IOLDO, output stiman4 );
  wire   GNDI;

  xo2iobuf \stim_an_pad[4] ( .I(IOLDO), .T(GNDI), .PAD(stiman4));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stiman4) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_an_4__MGIOL ( output IOLDO, input OPOS );
  wire   VCCI, GNDI;

  mfflsre \u_cg_fsm_r_stim_anio[4] ( .D0(OPOS), .SP(VCCI), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_an_3_ ( input IOLDO, output stiman3 );
  wire   GNDI;

  xo2iobuf \stim_an_pad[3] ( .I(IOLDO), .T(GNDI), .PAD(stiman3));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stiman3) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_an_3__MGIOL ( output IOLDO, input OPOS );
  wire   VCCI, GNDI;

  mfflsre \u_cg_fsm_r_stim_anio[3] ( .D0(OPOS), .SP(VCCI), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_an_2_ ( input IOLDO, output stiman2 );
  wire   GNDI;

  xo2iobuf \stim_an_pad[2] ( .I(IOLDO), .T(GNDI), .PAD(stiman2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stiman2) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_an_2__MGIOL ( output IOLDO, input OPOS );
  wire   VCCI, GNDI;

  mfflsre \u_cg_fsm_r_stim_anio[2] ( .D0(OPOS), .SP(VCCI), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_an_1_ ( input IOLDO, output stiman1 );
  wire   GNDI;

  xo2iobuf \stim_an_pad[1] ( .I(IOLDO), .T(GNDI), .PAD(stiman1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stiman1) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_an_1__MGIOL ( output IOLDO, input OPOS );
  wire   VCCI, GNDI;

  mfflsre \u_cg_fsm_r_stim_anio[1] ( .D0(OPOS), .SP(VCCI), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_an_0_ ( input IOLDO, output stiman0 );
  wire   GNDI;

  xo2iobuf \stim_an_pad[0] ( .I(IOLDO), .T(GNDI), .PAD(stiman0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stiman0) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_an_0__MGIOL ( output IOLDO, input OPOS );
  wire   VCCI, GNDI;

  mfflsre \u_cg_fsm_r_stim_anio[0] ( .D0(OPOS), .SP(VCCI), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module stim_comp_en_n ( input IOLDO, output stim_comp_en_n );
  wire   GNDI;

  xo2iobuf stim_comp_en_n_pad( .I(IOLDO), .T(GNDI), .PAD(stim_comp_en_n));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => stim_comp_en_n) = (0:0:0,0:0:0);
  endspecify

endmodule

module stim_comp_en_n_MGIOL ( output IOLDO, input OPOS );
  wire   VCCI, GNDI;

  mfflsre u_cg_fsm_r_stim_comp_enio( .D0(OPOS), .SP(VCCI), .CK(GNDI), 
    .LSR(GNDI), .Q(IOLDO));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
  endspecify

endmodule

module data_out ( input PADDO, output data_out );
  wire   GNDI;

  xo2iobuf data_out_pad( .I(PADDO), .T(GNDI), .PAD(data_out));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => data_out) = (0:0:0,0:0:0);
  endspecify

endmodule

module clk_out ( input PADDO, output clk_out );
  wire   GNDI;

  xo2iobuf clk_out_pad( .I(PADDO), .T(GNDI), .PAD(clk_out));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => clk_out) = (0:0:0,0:0:0);
  endspecify

endmodule

module lv_oe_n ( input PADDO, output lv_oe_n );
  wire   GNDI;

  xo2iobuf lv_oe_n_pad( .I(PADDO), .T(GNDI), .PAD(lv_oe_n));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => lv_oe_n) = (0:0:0,0:0:0);
  endspecify

endmodule

module lv_dir ( input PADDO, output lv_dir );
  wire   GNDI;

  xo2iobuf lv_dir_pad( .I(PADDO), .T(GNDI), .PAD(lv_dir));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => lv_dir) = (0:0:0,0:0:0);
  endspecify

endmodule

module led_out_15_ ( input PADDO, output ledout15 );
  wire   GNDI;

  xo2iobuf \led_out_pad[15] ( .I(PADDO), .T(GNDI), .PAD(ledout15));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ledout15) = (0:0:0,0:0:0);
  endspecify

endmodule

module led_out_14_ ( input PADDO, output ledout14 );
  wire   GNDI;

  xo2iobuf \led_out_pad[14] ( .I(PADDO), .T(GNDI), .PAD(ledout14));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ledout14) = (0:0:0,0:0:0);
  endspecify

endmodule

module led_out_13_ ( input PADDO, output ledout13 );
  wire   GNDI;

  xo2iobuf \led_out_pad[13] ( .I(PADDO), .T(GNDI), .PAD(ledout13));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ledout13) = (0:0:0,0:0:0);
  endspecify

endmodule

module led_out_12_ ( input PADDO, output ledout12 );
  wire   GNDI;

  xo2iobuf \led_out_pad[12] ( .I(PADDO), .T(GNDI), .PAD(ledout12));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ledout12) = (0:0:0,0:0:0);
  endspecify

endmodule

module led_out_11_ ( input PADDO, output ledout11 );
  wire   GNDI;

  xo2iobuf \led_out_pad[11] ( .I(PADDO), .T(GNDI), .PAD(ledout11));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ledout11) = (0:0:0,0:0:0);
  endspecify

endmodule

module led_out_10_ ( input PADDO, output ledout10 );
  wire   GNDI;

  xo2iobuf \led_out_pad[10] ( .I(PADDO), .T(GNDI), .PAD(ledout10));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ledout10) = (0:0:0,0:0:0);
  endspecify

endmodule

module led_out_9_ ( input PADDO, output ledout9 );
  wire   GNDI;

  xo2iobuf \led_out_pad[9] ( .I(PADDO), .T(GNDI), .PAD(ledout9));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ledout9) = (0:0:0,0:0:0);
  endspecify

endmodule

module led_out_8_ ( input PADDO, output ledout8 );
  wire   GNDI;

  xo2iobuf \led_out_pad[8] ( .I(PADDO), .T(GNDI), .PAD(ledout8));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ledout8) = (0:0:0,0:0:0);
  endspecify

endmodule

module led_out_7_ ( input PADDO, output ledout7 );
  wire   GNDI;

  xo2iobuf \led_out_pad[7] ( .I(PADDO), .T(GNDI), .PAD(ledout7));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ledout7) = (0:0:0,0:0:0);
  endspecify

endmodule

module led_out_6_ ( input PADDO, output ledout6 );
  wire   GNDI;

  xo2iobuf \led_out_pad[6] ( .I(PADDO), .T(GNDI), .PAD(ledout6));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ledout6) = (0:0:0,0:0:0);
  endspecify

endmodule

module led_out_5_ ( input PADDO, output ledout5 );
  wire   GNDI;

  xo2iobuf \led_out_pad[5] ( .I(PADDO), .T(GNDI), .PAD(ledout5));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ledout5) = (0:0:0,0:0:0);
  endspecify

endmodule

module led_out_4_ ( input PADDO, output ledout4 );
  wire   GNDI;

  xo2iobuf \led_out_pad[4] ( .I(PADDO), .T(GNDI), .PAD(ledout4));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ledout4) = (0:0:0,0:0:0);
  endspecify

endmodule

module led_out_3_ ( input PADDO, output ledout3 );
  wire   GNDI;

  xo2iobuf \led_out_pad[3] ( .I(PADDO), .T(GNDI), .PAD(ledout3));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ledout3) = (0:0:0,0:0:0);
  endspecify

endmodule

module led_out_2_ ( input PADDO, output ledout2 );
  wire   GNDI;

  xo2iobuf \led_out_pad[2] ( .I(PADDO), .T(GNDI), .PAD(ledout2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ledout2) = (0:0:0,0:0:0);
  endspecify

endmodule

module led_out_1_ ( input PADDO, output ledout1 );
  wire   GNDI;

  xo2iobuf \led_out_pad[1] ( .I(PADDO), .T(GNDI), .PAD(ledout1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => ledout1) = (0:0:0,0:0:0);
  endspecify

endmodule

module polarity_2_ ( output PADDI, input polarity2 );

  xo2iobuf0089 \polarity_pad[2] ( .Z(PADDI), .PAD(polarity2));

  specify
    (polarity2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge polarity2, 0:0:0);
    $width (negedge polarity2, 0:0:0);
  endspecify

endmodule

module xo2iobuf0089 ( output Z, input PAD );

  IBPD INST1( .I(PAD), .O(Z));
endmodule

module sw2_b ( output PADDI, input sw2_b );

  xo2iobuf0089 sw2_b_pad( .Z(PADDI), .PAD(sw2_b));

  specify
    (sw2_b => PADDI) = (0:0:0,0:0:0);
    $width (posedge sw2_b, 0:0:0);
    $width (negedge sw2_b, 0:0:0);
  endspecify

endmodule

module sw2_a ( output PADDI, input sw2_a );

  xo2iobuf0089 sw2_a_pad( .Z(PADDI), .PAD(sw2_a));

  specify
    (sw2_a => PADDI) = (0:0:0,0:0:0);
    $width (posedge sw2_a, 0:0:0);
    $width (negedge sw2_a, 0:0:0);
  endspecify

endmodule

module sw1_b ( output PADDI, input sw1_b );

  xo2iobuf0089 sw1_b_pad( .Z(PADDI), .PAD(sw1_b));

  specify
    (sw1_b => PADDI) = (0:0:0,0:0:0);
    $width (posedge sw1_b, 0:0:0);
    $width (negedge sw1_b, 0:0:0);
  endspecify

endmodule

module sw1_a ( output PADDI, input sw1_a );

  xo2iobuf0089 sw1_a_pad( .Z(PADDI), .PAD(sw1_a));

  specify
    (sw1_a => PADDI) = (0:0:0,0:0:0);
    $width (posedge sw1_a, 0:0:0);
    $width (negedge sw1_a, 0:0:0);
  endspecify

endmodule

module GSR_INST ( input GSRNET );

  GSR5MODE GSR_INST_GSRMODE( .GSR(GSRNET));

  specify
  endspecify

endmodule

module GSR5MODE ( input GSR );
  wire   GSRMODE;

  BUFBA INST10( .A(GSR), .Z(GSRMODE));
  GSR INST20( .GSR(GSRMODE));
endmodule
